@model Minvu.Snat.Domain.Forms.GeneracionDeSolicitudPago
@using Minvu.Snat.Helper;
@using System.Web.Mvc;
@*@{
        Layout = "~/Views/Shared/_LayoutFormularios.cshtml";
        ViewBag.Title = "Información del Grupo";
    }*@



@Html.Hidden("identificacionParcialidad", 0);
<style>
    #mdialTamanio {
        width: 95% !important;
    }
</style>

<style>
    #mdialTamanio2 {
        width: 70% !important;
    }
</style>

<style type="text/css">
    .oculta {
        display: none;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.6.4/js/bootstrap-datepicker.js"></script>

<script>
    function ValidacionMontosMinimos() {
        $('#txtMontoTotalProyecto').removeAttr('style');
        $('#txtSaldoPorPagar').removeAttr('style');
        $('#txtMontoSolicitud').removeAttr('style');
        var MontoTotal = ($("#txtMontoTotalProyecto").text());//.replace(/\.\b/gi, '');
        var SaldoPagar = ($("#txtSaldoPorPagar").text());//.replace(/\.\b/gi, '');
        var MontoSolicitud = ($("#txtMontoSolicitud").text());//.replace(/\.\b/gi, '');

        // agregar . a miles .replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1.');

        //Validacion de Monto Solicitud
        var SumaMayor = false;


        if (parseFloat(SaldoPagar.replace(/\,\b/gi, '')) < parseFloat(MontoSolicitud.replace(/\,\b/gi, ''))) {

            SumaMayor = true;
        }
        //Validacion de Monto Solicitud

        //Si el saldo por pagar o el Monto Total o Saldo por Pagar es 0 se mantiene deshabilitado boton grabar solicitud
        if ((parseFloat(MontoTotal.replace(/\,\b/gi, '')) == 0) || (parseFloat(SaldoPagar.replace(/\,\b/gi, '')) == 0) || (parseFloat(MontoSolicitud.replace(/\,\b/gi, '')) == 0) || SumaMayor) {
            var html = [];
            @*html.push('<strong><p id="lblMontosCero">Estimado \"@SiteHelper.NombreCompletoUsuario\", una vez regularizados todos los montos se habilitará el boton "Grabar solicitud de pago".</p></strong><br/>');*@
            html.push('<strong><p id="lblMontosCero">Estimado, una vez regularizados todos los montos se habilitará el botón "Grabar solicitud de pago".</p></strong><br/>');


            if ($('#txtMontoTotalProyecto').text == '0' || $('#txtMontoTotalProyecto').text == '0,00') {//Monto Total Proyecto 0
                html.push('<strong><p>* Sección "Información de servicios":</p></strong>');
                html.push('<strong><p>- El "Monto total proyecto" no puede ser igual o menor a "0".</p></strong>');
                document.getElementById("txtMontoTotalProyecto").style.color = 'red';
            }

            if (parseFloat(SaldoPagar.replace(/\,\b/gi, '')) < 0) {//Saldo por Pagar 0
                if (parseFloat(MontoTotal) != 0) {
                    html.push('<strong><p>* Sección "Información de servicios":</p></strong>');
                }
                html.push('<strong><p>- El "Saldo por pagar" no puede ser igual o menor a "0".</p></strong>');
                document.getElementById("txtSaldoPorPagar").style.color = 'red';
            }

            if ((parseFloat(MontoTotal.replace(/\,\b/gi, '')) == 0) || (parseFloat(SaldoPagar.replace(/\,\b/gi, '')) == 0)) {
                html.push('<br/>');
            }

            if (parseFloat(MontoSolicitud.replace(/\,\b/gi, '')) == 0) {//Monto Solicitud 0
                html.push('<strong><p>* Sección "Solicitud de pago":</p></strong>');
                html.push('<strong><p>- El "Monto solicitud" del Proyecto no puede ser igual o menor a "0".</p></strong>');
                document.getElementById("txtMontoSolicitud").style.color = 'red';
            }

            if (SumaMayor) {//Monto Soloicitud + Saldo por Pagar Mayor a Monto Total Proyecto
                if (parseFloat(MontoSolicitud) != 0) {
                    html.push('<strong><p>* Sección "Solicitud de pago":</p></strong>');
                }
                html.push('<strong><p>- El "Monto solicitud" no puede ser mayor al "Saldo por pagar" del Proyectos.</p></strong>');
                document.getElementById("txtSaldoPorPagar").style.color = 'red';
                document.getElementById("txtMontoSolicitud").style.color = 'red';
            }

            $('#divMontosCero').html(html.join(""));
            $('#divMontosCero').show();
            $('#btnGuardar').removeAttr('disabled');
            $('#btnGuardar').attr('disabled', true);
        }
        else {
            $('#divMontosCero').hide();
            $('#lblMontosCero').text('');

            if (document.getElementById("divbtnGrabar") != null) {
                if (!($('#divbtnGrabar').is(":visible"))) {//Si ya ingreso Servicios y Parcialidades
                    $('#btnGuardar').removeAttr('disabled');
                }
            }
        }
    }

    $(document).ready(function () {
        $('#divServiciosCalculoMonto').hide();
        $('#divMontosCero').hide();
        $('#divCalculoMontoSolicitud').hide();
        @if (Model._solicitudPago != null)
        {
            if (Model._solicitudPago.idSolicitudPago == 0)
            {
                @:ValidacionMontosMinimos();
            }
        }
    });
</script>

<script type="text/javascript">
    var listaIncrementos = [];
    var resultadolistaIncremento = [];

    function ObtenerIncrementos() {
        console.log('método llena incrementos');
        @for (int j = 0; j < Model._listMaestroIncrementoEntities?.Count; j++){
            @:listaIncrementos.push({ idIncremento: '@Model._listMaestroIncrementoEntities[j].idMaestroIncremento' });
        }
    }

    $(function () {
        $("#btnGetIncremento").click(function () {
            $('.spinner').css('display', 'block');

            resultadolistaIncremento = [];
            $.each(listaIncrementos, function (i, obj) {
                var idIncremento = obj.idIncremento;
                var idCampo = "chkIncremento" + idIncremento;
                var resultadoIncremento = $('#' + idCampo).prop('checked');

                resultadolistaIncremento.push({
                    idIncremento: idCampo.toString(),
                    resultadoIncremento: resultadoIncremento.toString(),
                });
            });

            var data1 = { 'listObject': resultadolistaIncremento };
            var data = JSON.stringify(data1)

            $.ajax({
                type: "POST",
                url: "/SolicitudPago/guardarIncrementos",
                data: data,
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    if (response.success) {
                        $('#PopUpIncrementos').modal('hide');
                        $('#divErrorIncrementos').hide();
                        $('#miModal').modal('toggle');
                        $('#strongModal').text('Incrementos guardados correctamente.');
                        $('.spinner').css('display', 'none');
                    } else {
                        $('#divErrorIncrementos').show();
                        $("#strongErrorIncrementos").text('Error al guardar Incrementos.');
                        $('.spinner').css('display', 'none');
                    }
                },
                failure: function (response) {
                    $('#divErrorIncrementos').show();
                    $("#strongErrorIncrementos").text('Error al guardar Incrementos.');
                    $('.spinner').css('display', 'none');
                },
                error: function (response) {
                    $('#divErrorIncrementos').show();
                    $("#strongErrorIncrementos").text('Error al guardar Incrementos.');
                    $('.spinner').css('display', 'none');
                }
            });
        });
    });



    $(function () {
        $("#obtenerIncrementosGuardado").click(function () {
            $.ajax({
                type: "POST",
                url: "/SolicitudPago/obtenerIncrementos",
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    if (response.success) {
                        var cadena = response.responseText,
                            separador = "-", // un espacio en blanco
                            arregloDeSubCadenas = cadena.split(separador);

                        $.each(arregloDeSubCadenas, function (i, obj) {
                            var cadena1 = obj;
                            var res = cadena1.substring(cadena1.length - 1);
                            var nombreCheck = obj.slice(0, -1);

                            if (res == "1") {
                                $("#" + nombreCheck).attr('checked', true);
                                $('#' + nombreCheck).prop('checked', true);
                            } else {
                                $("#" + nombreCheck).attr('checked', false);
                                $('#' + nombreCheck).prop('checked', false);
                            }
                        })
                    }
                }
            });
        });
    });

    $(function () {
        $("#btnBuscarBoleta").click(function () {
            if ($("#txtFolioBoleta").val() != "") {
                $('.spinner').css('display', 'block');
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("ObtenerBoleta")',
                    dataType: 'json',
                    data: { sFolioBoleta: $("#txtFolioBoleta").val() },
                    success: function (response) {
                        if (response.success) {
                            $('.spinner').css('display', 'none');
                            if (response.fecBoleta != "") {
                                $("#txtFechaBoleta").text(response.fecBoleta);
                            } else {
                                $("#txtFechaBoleta").text("Sin información");
                                $('.spinner').css('display', 'none');
                            }
                        } else {
                            $("#txtFechaBoleta").text("Sin información");
                            $('.spinner').css('display', 'none');
                        }
                    },
                    failure: function (response) {
                        $('#divErrorServicios').show();
                        $("#strongErrorServicios").text("Error al buscar boleta.");
                        $('.spinner').css('display', 'none');
                    },
                    error: function (response) {
                        $('#divErrorServicios').show();
                        $("#strongErrorServicios").text("Error al buscar boleta.");
                        $('.spinner').css('display', 'none');
                    }
                });
            } else {
                $("#txtFolioBoleta").css('border-color', '#b94a48');
                document.getElementById('msgBoleta').style.display = 'block';
                $("#msgBoleta").html("Ingrese folio boleta.");
            }
        });
    });
</script>



<script>

    function rescatarNombreEC() {
        if ($("#ddlListProveedorConstructora").val() != "") {
            $.ajax({
                type: 'POST',
                url: "/SolicitudPago/rescatarNombreProveedorEC",
                dataType: 'json',
                data: { idProveedor: $("#ddlListProveedorConstructora").val() },
                success: function (response) {
                    if (response.success) {
                        $("#lblNombreEC ").text(response.responseText);
                        $("#lblTitNombreEC").text("Proveedor: ");
                    }
                }
            });
        } else {
            $("#lblNombreEC").text("Sin información");
            $("#lblTitNombreEC").text("Proveedor:");

        }
    };

    function rescatarNombreFTO() {
        if ($("#ddlListProveedorFTO").val() != "") {
            $.ajax({
                type: 'POST',
                url: "/SolicitudPago/rescatarNombreProveedorEC",
                dataType: 'json',
                data: { idProveedor: $("#ddlListProveedorFTO").val() },
                success: function (response) {
                    if (response.success) {
                        $("#lblNombreFTO ").text(response.responseText);
                        $("#lblTitNombreFTO").text("Proveedor: ");
                    }
                }
            });
        } else {
            $("#lblNombreFTO").text("Sin información");
            $("#lblTitNombreFTO").text("Proveedor:");

        }
    };

    $(document).ready(function () {

        $("#ddlListProveedorConstructora").change(function () {
            // $("#ddlProvincia").empty();
            if ($("#ddlListProveedorConstructora").val() != "") {
                $.ajax({
                    type: 'POST',
                    url: "/SolicitudPago/rescatarNombreProveedorEC",
                    dataType: 'json',
                    data: { idProveedor: $("#ddlListProveedorConstructora").val() },
                    success: function (response) {
                        if (response.success) {
                            $("#lblNombreEC ").text(response.responseText);
                            $("#lblTitNombreEC").text("Proveedor: ");
                        }
                    }
                });
            } else {
                $("#lblNombreEC").text("Sin información");
                $("#lblTitNombreEC").text("Proveedor:");

            }

        })

        $("#ddlListProveedorFTO").change(function () {
            // $("#ddlProvincia").empty();
            if ($("#ddlListProveedorFTO").val() != "") {
                $.ajax({
                    type: 'POST',
                    url: "/SolicitudPago/rescatarNombreProveedorEC",
                    dataType: 'json',
                    data: { idProveedor: $("#ddlListProveedorFTO").val() },
                    success: function (response) {
                        if (response.success) {
                            $("#lblNombreFTO ").text(response.responseText);
                            $("#lblTitNombreFTO").text("Proveedor: ");
                        }
                    }
                });
            } else {
                $("#lblNombreFTO").text("Sin información");
                $("#lblTitNombreFTO").text("Proveedor:");

            }

        })
    });
</script>

<script type="text/javascript">
    // con esta función comprobás que sea un número
    function es_numero(input) {
        return !isNaN(input) && parseFloat(input).toFixed(3) == input;
    }
    //ahora verificas que sea no sea mayor que 100
    function comprobarDecimal(value_elemento) {
        var laedad = value_elemento.value;
        if (es_numero(laedad)) {
        } else {
            value_elemento.value = "";
        }
    }
</script>

<script type="text/javascript">
    // con esta función comprobás que sea un número
    function es_numero(input) {
        return !isNaN(input) && parseInt(input) == input;
    }
    //ahora verificas que sea no sea mayor que 100
    function comprobar(value_elemento) {
        var laedad = value_elemento.value;
        if (es_numero(laedad)) {
        } else {
            value_elemento.value = "";
        }
    }
</script>

<script>
    $(function () {
        $("#btnVolver").click(function () {
            document.location = '@Url.Action("BusquedaSolicitud", "SolicitudPago", new { sesiones = true })';
        });
    });
</script>

@if (Model != null)
{
    if (Model._caracteristicasEspecialesEntities != null)
    {
        <script type="text/javascript">
            //informacionFiscalizacionTecnica
            function mostrar(value_elemento) {//Recibe IdMaestroTipoProveedor
                //var total = 2; //total de mis capas
                var elemento;
                var i = 1, j = 2, k = 4;
                var muestra = false;

                var nombre = "";

                if (value_elemento == 1 || value_elemento == 7) {
                    nombre = "rutEP";
                } else if (value_elemento == 2) {
                    rescatarNombreEC();
                } else if (value_elemento == 6) {
                    nombre = "rutFTO";
                    rescatarNombreFTO();
                }

                if (value_elemento == 0) {
                    document.getElementById('informacionServicios').style.display = "none";
                    document.getElementById('informacionFiscalizacionTecnica').style.display = "none";
                    document.getElementById('capa' + i).style.display = "none";
                    document.getElementById('capa' + j).style.display = "none";
                    document.getElementById('capa' + k).style.display = "none";
                    document.getElementById('DivParcialidades').style.display = "none";
                    document.getElementById('ParcialidadesOrdinarias').style.display = "none";
                    document.getElementById('ParcialidadesFTO').style.display = "none";
                    document.getElementById('DivPagoArancel').style.display = "none";

                    muestra = false;
                } else if (value_elemento == 1 || value_elemento == 7) {
                    document.getElementById('informacionServicios').style.display = "block";
                    document.getElementById('DivParcialidades').style.display = "block";
                    document.getElementById('informacionFiscalizacionTecnica').style.display = "none";
                    document.getElementById('ParcialidadesFTO').style.display = "none";
                    document.getElementById('capa' + i).style.display = "block";
                    document.getElementById('capa' + j).style.display = "none";
                    document.getElementById('capa' + k).style.display = "none";


                    if (value_elemento == 1) {
                        document.getElementById('ParcialidadesOrdinarias').style.display = "block";
                        document.getElementById('DivPagoArancel').style.display = "none";

                    }
                    else if (value_elemento == 7) {
                        document.getElementById('ParcialidadesOrdinarias').style.display = "none";
                        document.getElementById('DivPagoArancel').style.display = "block";
                    }

                    muestra = true;

                } else if (value_elemento == 2) {
                    document.getElementById('DivParcialidades').style.display = "block";
                    document.getElementById('informacionServicios').style.display = "block";
                    document.getElementById('ParcialidadesOrdinarias').style.display = "block";
                    document.getElementById('informacionFiscalizacionTecnica').style.display = "none";
                    document.getElementById('ParcialidadesFTO').style.display = "none";
                    document.getElementById('capa' + i).style.display = "none";
                    document.getElementById('capa' + j).style.display = "block";
                    document.getElementById('DivPagoArancel').style.display = "none";
                    document.getElementById('capa' + k).style.display = "none";
                    muestra = true;

                } else if (value_elemento == 6) {
                    document.getElementById('DivParcialidades').style.display = "block";
                    document.getElementById('informacionServicios').style.display = "block";
                    document.getElementById('informacionFiscalizacionTecnica').style.display = "none";
                    document.getElementById('ParcialidadesOrdinarias').style.display = "none";
                    document.getElementById('ParcialidadesFTO').style.display = "block";
                    document.getElementById('capa' + i).style.display = "none";
                    document.getElementById('capa' + j).style.display = "none";
                    document.getElementById('DivPagoArancel').style.display = "none";
                    document.getElementById('capa' + k).style.display = "block";
                    muestra = true;
                } else {
                    document.getElementById('ParcialidadesOrdinarias').style.display = "none";
                    document.getElementById('DivParcialidades').style.display = "none";
                    document.getElementById('DivPagoArancel').style.display = "none";
                    document.getElementById('ParcialidadesFTO').style.display = "none";
                    document.getElementById('DivPagoArancel').style.display = "none";
                    document.getElementById('capa' + i).style.display = "none";
                    document.getElementById('capa' + j).style.display = "none";
                    document.getElementById('capa' + k).style.display = "none";

                }


            }

            //document.getElementById('ParcialidadesOrdinarias').style.display = "block";
            function mostrarMandato() {
                var chkMandato = $('#chkMandato').prop('checked');
                if (chkMandato) {
                    document.getElementById('divConMandato').style.display = "block";
                }
                if (!chkMandato) {
                    document.getElementById('divConMandato').style.display = "none";
                }
            }
        </script>
        @*Ajax para calcular monto servicios*@

        <script type="text/javascript">
            var listaParcialidades = [];
            var resultadolistaParcialidades = [];

            function mostrarBotonGuardar() {

                var chkServicios = $('#chkServicios').prop('checked');

                var chkParcialidad = $('#identificacionParcialidad').val();







                if (chkParcialidad == 1 && chkServicios) {
                    $('#divbtnGrabar').hide();

                    if (!($('#divMontosCero').is(":visible"))) {//Sise encuentran correctos Montos
                        $('#btnGuardar').removeAttr('disabled');
                        $('#btnGuardar').attr('disabled', false);
                    }
                } else {
                    $("#btnGuardar").attr('disabled', true);
                }
            }

            function ObtenerServicios() {
                console.log('método llena servicios');

                @for (int i = 0; i < Model._aux2PlantillaEntities?.Count; i++)
                {
                    @:listaParcialidades.push({ idServicio: '@Model._aux2PlantillaEntities[i].idServicio' });
                }
            }

            $(function () {
                $("#btnSaveServicios").click(function () {
                    $('.spinner').css('display', 'block');
                    resultadolistaParcialidades = [];

                    $.each(listaParcialidades, function (i, obj) {
                        if (obj.idServicio != undefined) {
                            var idServicio = obj.idServicio;
                            var montoServicio = $('#txtMontoServicio' + idServicio).val();
                            var montoAsignacion = $('#txtAsignacionDirecta' + idServicio).val();
                            var valorMontoAsignacion = '';
                            if (montoAsignacion != undefined) {
                                valorMontoAsignacion = montoAsignacion.toString().replace(/\.\b/gi, '');
                                document.getElementById("hdnAsignacionDirecta" + idServicio).value = (valorMontoAsignacion.toString().replace(/\.\b/gi, ''));
                            }

                            if (document.getElementById("hdnMontoServicio" + idServicio) != null) {
                                document.getElementById("hdnMontoServicio" + idServicio).value = (montoServicio.toString().replace(/\.\b/gi, ''));
                            }

                            resultadolistaParcialidades.push({
                                idServicio: idServicio.toString(),
                                montoServicio: montoServicio.toString().replace(/\.\b/gi, ''),
                                montoAsignacion: valorMontoAsignacion,
                            });
                        }

                    });

                    var data1 = { 'listObject': resultadolistaParcialidades };
                    var data = JSON.stringify(data1)

                    $.ajax({
                        type: "POST",
                        url: "/SolicitudPago/refrescarServicios",
                        data: data,
                        contentType: 'application/json; charset=utf-8',
                        success: function (response) {
                            if (response.success) {


                                //$("#txtMontoTotalProyecto").text(response.responseText);
                                $("#txtMontoTotalProyectoPopUp").val(response.responseText);
                                document.getElementById('hdnMontoTotalProyecto').value = response.responseText;
                                //var montoSaldo = parseFloat((parseFloat($("#txtMontoTotalProyecto").text()) - (parseFloat($("#txtMontoPagado").text()) + parseFloat($("#txtMontoComprometido").text()))));
                                //$("#txtSaldoPorPagar").text(montoSaldo.toFixed(3));
                                //$("#txtSaldoPorPagar").text($("#txtSaldoPorPagar").text().replace(".", ","));
                                //$("#txtSaldoPorPagarFTO").text(montoSaldo.toFixed(3));
                                //$("#txtSaldoPorPagarFTO").text($("#txtSaldoPorPagarFTO").text().replace(".", ","));

                                //formatNumber(document.getElementById("txtMontoTotalProyecto"), false);
                                //formatNumber(document.getElementById("txtSaldoPorPagar"), false);
                                //formatNumber(document.getElementById("txtMontoTotalProyectoPopUp"), true);

                                $.ajax({
                                    type: 'POST',
                                    url: "/SolicitudPago/obtenerValorMontoTotalProyecto",
                                    dataType: 'json',
                                    //data: { idProveedor: $("#ddlListProveedorConstructora").val() },
                                    success: function (response) {


                                        $("#txtMontoTotalProyecto").text(response);
                                        $("#txtMontoTotalProyectoFTO").text(response);
                                        document.getElementById('hdnMontoSolicitud').value = response;
                                    }
                                });

                                $.ajax({
                                    type: 'POST',
                                    url: "/SolicitudPago/obtenerValorMontoComprometido",
                                    dataType: 'json',
                                    data: { _txtMontoComprometido: $("#txtMontoComprometido").text() },
                                    success: function (response) {

                                        $("#txtMontoComprometido").text(response);
                                    }
                                });

                                $.ajax({
                                    type: 'POST',
                                    url: "/SolicitudPago/obtenerValorMontoPagado",
                                    dataType: 'json',
                                    data: { _txtMontoPagado: $("#txtMontoPagado").text() },
                                    success: function (response) {

                                        $("#txtMontoPagado").text(response);
                                    }
                                });


                                $.ajax({
                                    type: 'POST',
                                    url: "/SolicitudPago/obtenerValorSaldoPorPagar",
                                    dataType: 'json',
                                    data: { _txtMontoPagado: $("#txtMontoPagado").text(), _txtMontoComprometido: $("#txtMontoComprometido").text() },
                                    success: function (response) {

                                        $("#txtSaldoPorPagar").text(response);
                                        $("#txtSaldoPorPagarFTO").text(response);
                                        str = response;

                                        str = str.replace(".", "");

                                        document.getElementById('hdnSaldoPorPagar').value = str;
                                    }
                                });




                                $("#chkServicios").prop('checked', true);
                                $("#ddlTipoProveedor").removeAttr('disabled');
                                $('#PopUpServicios').modal('hide');
                                $('#miModal').modal('toggle');
                                $('#strongModal').text('Servicios guardados correctamente.');
                                $('#divErrorServicios').hide();
                                $('#dataParcialidades').removeAttr("data-target");
                                $('#dataParcialidades').attr("data-target", "#PopUpServicios2");




                                $('.spinner').css('display', 'none');

                                ValidacionMontosMinimos();
                                mostrarBotonGuardar();
                            } else {
                                $('#divErrorServicios').show();
                                $("#strongErrorServicios").text(response.responseText);
                                $("#chkServicios").prop('checked', false);
                                $("#ddlTipoProveedor").attr('disabled', true);
                                $('#dataParcialidades').removeAttr("data-target");
                                $('#dataParcialidades').attr("data-target", "#infoParcialidades");
                                $('.spinner').css('display', 'none');

                                ValidacionMontosMinimos();
                                mostrarBotonGuardar();
                            }
                        },
                        failure: function (response) {
                            $('#divErrorServicios').show();
                            $("#strongErrorServicios").text(response.responseText);
                            $("#chkServicios").prop('checked', false);
                            $("#ddlTipoProveedor").attr('disabled', true);
                            $('.spinner').css('display', 'none');

                            ValidacionMontosMinimos();
                            mostrarBotonGuardar();
                        },
                        error: function (response) {
                            $('#divErrorServicios').show();
                            $("#strongErrorServicios").text(response.responseText);
                            $("#chkServicios").prop('checked', false);
                            $("#ddlTipoProveedor").attr('disabled', true);
                            $('.spinner').css('display', 'none');

                            ValidacionMontosMinimos();
                            mostrarBotonGuardar();
                        }
                    });



                });


            });

            $(function () {
                $("#btnSalirServicios").click(function () {
                    $.ajax({
                        type: "POST",
                        url: "/SolicitudPago/recomponerServicios",
                        contentType: 'application/json; charset=utf-8',
                        success: function (response) {
                            if (response.success) {
                                var montoAsignacion;

                                for (i = 0; i < response.listServicios.length; i++) {
                                    if (response.listServicios[i].montoServicio != null) {//Campo Servicio
                                        $("#" + "txtMontoServicio" + response.listServicios[i].idServicio).val(response.listServicios[i].montoServicio);
                                        formatNumber(document.getElementById("txtMontoServicio" + response.listServicios[i].idServicio), true);
                                    }

                                    if (response.listServicios[i].montoAsignacion != null) {//Campo AsignacionDirecta
                                        montoAsignacion = $("#" + "txtAsignacionDirecta" + response.listServicios[i].idServicio).val();
                                        if (montoAsignacion != undefined) {
                                            $("#" + "txtAsignacionDirecta" + response.listServicios[i].idServicio).val(response.listServicios[i].montoAsignacion);
                                            formatNumber(document.getElementById("txtAsignacionDirecta" + response.listServicios[i].idServicio), true);
                                        }
                                    }
                                }
                            } else {
                            }
                        },
                        failure: function (response) {
                        },
                        error: function (response) {
                        }
                    });
                });
            });
        </script>
        @*Ajax para calcular monto parcialidades*@

        <script type="text/javascript">
            var listaParcialidades = [];
            var resultadolistaParcialidades = [];

            function ObtenerParcialidades() {
                console.log('método llena parciaidades');
                @for (int i = 0; i < Model._auxPlantillaEntities?.Count; i++)
                {
                    @:listaParcialidades.push({ idServicio: '@Model._auxPlantillaEntities[i].idServicio', idParcialidad: '@Model._auxPlantillaEntities[i].idParcialidad' });
                }
            }

            $(function () {
                $("#btnGuardar").click(function () {//Guardar Parcialidades
                    $('.spinner').css('display', 'block');
                    resultadolistaParcialidades = [];

                    $.each(listaParcialidades, function (i, obj) {
                        var idServicio = obj.idServicio;
                        var idParcialidad = obj.idParcialidad;
                        var idCampo = "Servicio" + idServicio + "Parcialidad" + idParcialidad;
                        var resultadoParcialidad = $('#chk' + idCampo).prop('checked');
                        var valorParcialidad = $('#txt' + idCampo).val();

                        if (resultadoParcialidad) {
                            resultadolistaParcialidades.push({
                                idParcialidad: idParcialidad.toString(),
                                valorParcialidad: valorParcialidad.toString().replace(/\.\b/gi, ''),
                                resultadoParcialidad: resultadoParcialidad.toString(),
                                idServicio: idServicio.toString(),
                            });
                            document.getElementById("hdn" + idCampo).value = (valorParcialidad.toString().replace(/\.\b/gi, ''));
                        }
                    });

                    var data1 = { 'listObject': resultadolistaParcialidades };
                    var data = JSON.stringify(data1)

                    $.ajax({
                        type: "POST",
                        url: "/SolicitudPago/refrescarCampos",
                        data: data,
                        contentType: 'application/json; charset=utf-8',
                        success: function (response) {
                            if (response.success) {
                                $("#txtMontoSolicitud").text(response.responseText);
                                document.getElementById('hdnMontoSolicitud').value = response.responseText;
                                //$("#chkParcialidad").prop('checked', true);
                                $('#identificacionParcialidad').val(1);
                                $('#divErrorParcialidades').hide();
                                //$('#PopUpServicios2').modal('hide');
                                //$('#miModal').modal('toggle');
                                //$('#strongModal').text('Parcialidades guardadas correctamente.');
                                $('.spinner').css('display', 'none');

                                formatNumber(document.getElementById("txtMontoSolicitud"), false);

                                ValidacionMontosMinimos();
                                mostrarBotonGuardar();

                                var id = $("#ddlListProveedorConstructora").val()
                                VerificarFormulario(id);

                            } else {
                                $("#txtMontoSolicitud").text("0");
                                $('#divErrorParcialidades').show();
                                $('#btnGuardar').attr('disabled', true);
                                $("#strongErrorParcialidades").text(response.responseText)
                                $('#identificacionParcialidad').val(0);
                                $('.spinner').css('display', 'none');

                                ValidacionMontosMinimos();
                                mostrarBotonGuardar();
                                VerificarFormulario();

                            }
                        },

                        failure: function (response) {
                            $("#txtMontoSolicitud").text("0");
                            $('#divErrorParcialidades').show();
                            $('#btnGuardar').attr('disabled', true);
                            $("#strongErrorParcialidades").text(response.responseText)
                            //$("#chkParcialidad").prop('checked', false);
                            $('#identificacionParcialidad').val(0);
                            $('.spinner').css('display', 'none');

                            mostrarBotonGuardar();
                            VerificarFormulario();
                        },
                        error: function (response) {
                            $('#divErrorParcialidades').show();
                            $("#strongErrorParcialidades").text(response.responseText)
                            $('#btnGuardar').attr('disabled', true);
                            $("#txtMontoSolicitud").text("0");
                            //$("#chkParcialidad").prop('checked', false);
                            $('#identificacionParcialidad').val(0);
                            $('.spinner').css('display', 'none');

                            mostrarBotonGuardar();
                            VerificarFormulario();
                        }
                    });
                });
            });

            $(function () {
                $("#btnSalirParcialidades").click(function () {
                    $.ajax({
                        type: "POST",
                        url: "/SolicitudPago/recomponerParcialidades",
                        contentType: 'application/json; charset=utf-8',
                        success: function (response) {
                            if (response.success) {
                                for (i = 0; i < response.listPlantillas.length; i++) {
                                    var idCampo = "Servicio" + response.listPlantillas[i].idServicio + "Parcialidad" + response.listPlantillas[i].idParcialidad;
                                    $('#chk' + idCampo).prop('checked', false);
                                    $('#txt' + idCampo).attr('disabled', true);
                                    $('#txt' + idCampo).val('');
                                }

                                for (i = 0; i < response.listParcialidades.length; i++) {
                                    var idCampo = "Servicio" + response.listParcialidades[i].idServicio + "Parcialidad" + response.listParcialidades[i].idParcialidad;
                                    $('#chk' + idCampo).prop('checked', true);
                                    $('#txt' + idCampo).removeAttr('disabled');
                                    $('#txt' + idCampo).val(response.listParcialidades[i].valorParcialidad);
                                    formatNumber(document.getElementById("txt" + idCampo), true);
                                }
                            } else {
                            }
                        },
                        failure: function (response) {
                        },
                        error: function (response) {
                        }
                    });
                });
            });
        </script>

        <script>
            $(document).ready(function () {
                ObtenerParcialidades();
            });

            $(document).ready(function () {
                ObtenerIncrementos();
            });

            $(document).ready(function () {
                ObtenerServicios();
            });
        </script>
    }

    @* Si no es nueva generacion *@
    if (Model._solicitudPago != null)
    {
        if (Model._solicitudPago.idSolicitudPago > 0)
        {
            <script type="text/javascript">
                $('#dataParcialidades').removeAttr("data-target");
                $('#dataParcialidades').attr("data-target", "#PopUpServicios2");
            </script>
        }
        else
        {
            <script type="text/javascript">
                $('#dataParcialidades').removeAttr("data-target");
                $('#dataParcialidades').attr("data-target", "#infoParcialidades");
            </script>
        }
    }
}

@if (!string.IsNullOrEmpty(ViewBag.Message))
{
    <div class="modal fade" id="modalNoExisteProyecto" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Error</h4>
                </div>
                <div class="modal-body">
                    <p>@ViewBag.Message</p>
                </div>'
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Salir</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="container">
    @using (Html.BeginForm("GeneracionSolicitudPago", "SolicitudPago", FormMethod.Post, new { id = "formBusquedaProyecto" }))
    {

        @Html.HiddenFor(Model => Model._proveedorEC)

        <div class="form-group row">
            <div class="panel panel-info">
                <div class="panel-heading">
                    @if (Minvu.Security.SingleSignOn.CurrentPrincipal.HasTarea("Sim_GenerarSolPago") || Minvu.Security.SingleSignOn.CurrentPrincipal.HasTarea("Sim_GenerarSolPagoReg"))
                    {
                        <h2 class="panel-title">Búsqueda</h2>
                    }
                    else
                    {
                        <h2 class="panel-title">Proyecto</h2>
                    }
                </div>

                <div class="panel-body">
                    <div class="row">
                        <div class="control-label col-md-2">
                            <b style="color:red;">(*)</b> @Html.LabelFor(model => model._informacionProyectoEntities.codigoProyectoInformacionProyecto)
                        </div>
                        <div class="control-display col-md-2">
                            @if (Minvu.Security.SingleSignOn.CurrentPrincipal.HasTarea("Sim_GenerarSolPago") || Minvu.Security.SingleSignOn.CurrentPrincipal.HasTarea("Sim_GenerarSolPagoReg"))
                            {
                                @Html.TextBoxFor(model => model._informacionProyectoEntities.codigoProyectoInformacionProyecto, new { @class = "form-control", @maxlength = "8", @id = "codPr", @onblur = "comprobar(this)", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model._informacionProyectoEntities.codigoProyectoInformacionProyecto, new { @class = "form-control", @maxlength = "8", @id = "codPr", @onblur = "comprobar(this)", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", @disabled = "disabled" })
                            }
                            @*<span class="help-block">@Html.ValidationMessageFor(model => model._informacionProyectoEntities.codigoProyectoInformacionProyecto)</span>*@
                            <span id="msgCodPro" class="text-danger" style="display:none"></span>
                        </div>
                        <div>
                            <div class="control-label col-md-2">
                                <b style="color:red;">(*)</b> @Html.LabelFor(model => model._maestroProgramaEntities.nombreMaestroPrograma)
                            </div>
                            <div class="col-md-3">
                                @if (Minvu.Security.SingleSignOn.CurrentPrincipal.HasTarea("Sim_GenerarSolPago") || Minvu.Security.SingleSignOn.CurrentPrincipal.HasTarea("Sim_GenerarSolPagoReg"))
                                {
                                    @Html.DropDownListFor(model => model._maestroProgramaEntities.idMaestroPrograma, (IEnumerable<SelectListItem>)ViewBag.MySkills, "Selecciona", new { @class = "form-control", id = "ddlPrograma", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model._maestroProgramaEntities.idMaestroPrograma, (IEnumerable<SelectListItem>)ViewBag.MySkills, "Selecciona", new { @class = "form-control", id = "ddlPrograma", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", @disabled = "disabled" })
                                }
                                @*<span class="help-block">@Html.ValidationMessageFor(model => model._maestroProgramaEntities.idMaestroPrograma)</span>*@
                                <span id="msgPrograma" class="text-danger" style="display:none"></span>
                            </div>
                        </div>
                        @*<span class="glyphicon glyphicon-remove" aria-hidden="true"></span>*@
                        @if (Minvu.Security.SingleSignOn.CurrentPrincipal.HasTarea("Sim_GenerarSolPago") || Minvu.Security.SingleSignOn.CurrentPrincipal.HasTarea("Sim_GenerarSolPagoReg"))
                        {
                            <div class="col-md-3">
                                <button class="btn btn-primary btn-sm" type="submit" id="btnBuscar">
                                    Buscar proyecto
                                </button>
                            </div>
                        }
                        <div class="control-label col-md-1">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <br />
            <p>El campo con <b style="color:red;">(*)</b>  es obligatorio.</p>
        </div>
        <div class="row">
            <div id="divBusqueda" class="alert alert-danger oculta">
                <button class="close" type="button" data-dismiss="alert">x</button>
                <strong id="strongBusqueda">@ViewBag.Message</strong>
            </div>
        </div>
        <div class="row">
            <div id="divResultadoSolicitud" class="alert alert-success oculta">
                <button class="close" type="button" data-dismiss="alert">x</button>
                <strong id="strongSolicitud">Error</strong>
            </div>
        </div>
    }
    <br />
    @using (Html.BeginForm("guardarSolicitud", "SolicitudPago", FormMethod.Post, new { id = "formSolicitudPago" }))
    {
        if (Model._caracteristicasEspecialesEntities != null)
        {
            @Html.HiddenFor(Model => Model._ListTipoServicioParcialidadCaracteristicaEntities)
            @Html.HiddenFor(Model => Model._caracteristicasEspecialesEntities.idCaracteristicasEspeciales)
            @Html.HiddenFor(Model => Model._informacionProyectoEntities.idInformacionProyecto)
            @Html.HiddenFor(Model => Model._listTipoIncrementoEntities)
            <br /><br />
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h2 class="panel-title">Información del proyecto</h2>
                </div>
                <!-- #region Informacion proyecto -->
                <div class="panel-body">
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            @Html.LabelFor(model => model._informacionProyectoEntities.nombreProyectoInformacionProyecto)
                        </div>
                        <div class="control-display col-md-4">
                            @if (String.IsNullOrEmpty(Model._informacionProyectoEntities.nombreProyectoInformacionProyecto))
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Model._informacionProyectoEntities.nombreProyectoInformacionProyecto</p>
                            }
                        </div>
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._direccionEntities.nombreRegion)
                        </div>
                        <div class="control-display col-md-3">
                            @if (String.IsNullOrEmpty(Model._direccionEntities.nombreRegion))
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Model._direccionEntities.nombreRegion</p>
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            @Html.LabelFor(model => model._maestroProgramaEntities.nombreMaestroPrograma)
                        </div>
                        <div class="control-display col-md-4">
                            @if (String.IsNullOrEmpty(Model._maestroProgramaEntities.nombreMaestroPrograma))
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Model._maestroProgramaEntities.nombreMaestroPrograma</p>
                            }
                        </div>
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._direccionEntities.nombreProvincia)
                        </div>
                        <div class="control-display col-md-3">
                            @if (String.IsNullOrEmpty(Model._direccionEntities.nombreProvincia))
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Model._direccionEntities.nombreProvincia</p>
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            @Html.LabelFor(model => model._maestroLlamadoEntities.nombreMaestroLlamado)
                        </div>
                        <div class="control-display col-md-4">
                            @if (String.IsNullOrEmpty(Model._maestroLlamadoEntities.nombreMaestroLlamado))
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Model._maestroLlamadoEntities.nombreMaestroLlamado</p>
                            }
                        </div>
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._direccionEntities.nombreComuna)
                        </div>
                        <div class="control-display col-md-3">
                            @if (String.IsNullOrEmpty(Model._direccionEntities.nombreComuna))
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Model._direccionEntities.nombreComuna</p>
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            @Html.LabelFor(model => model._maestroModalidadEntities.nombreMaestroModalidad)
                        </div>
                        <div class="control-display col-md-4">
                            @if (String.IsNullOrEmpty(Model._maestroModalidadEntities.nombreMaestroModalidad))
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Model._maestroModalidadEntities.nombreMaestroModalidad</p>
                            }
                        </div>
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._maestroTipologiaEntities.nombreMaestroTipologia)
                        </div>
                        <div class="control-display col-md-3">
                            @if (String.IsNullOrEmpty(Model._maestroTipologiaEntities.nombreMaestroTipologia))
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Model._maestroTipologiaEntities.nombreMaestroTipologia</p>
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        @*El titulo se aplica solo PPPF, DS1,DS10*@
                        @if (Model._caracteristicasEspecialesEntities.idMaestroPrograma == 1 || Model._caracteristicasEspecialesEntities.idMaestroPrograma == 7 || Model._caracteristicasEspecialesEntities.idMaestroPrograma == 6)
                        {
                            <div class="control-label col-md-2">
                                @Html.LabelFor(model => model._maestroTituloEntities.nombreMaestroTitulo)
                            </div>
                            <div class="control-display col-md-4 ">
                                @if (String.IsNullOrEmpty(Model._maestroTituloEntities.nombreMaestroTitulo))
                                {
                                    <p>Sin Información</p>
                                }
                                else
                                {
                                    <p>@Model._maestroTituloEntities.nombreMaestroTitulo</p>
                                }
                            </div>
                        }
                        @if (Model._caracteristicasEspecialesEntities.idMaestroPrograma == 1)
                        {
                            <div class="control-label col-md-3">
                                @Html.LabelFor(model => model._maestroClaseEntities.nombreMaestroClase)
                            </div>
                            <div class="control-display col-md-3">
                                @if (String.IsNullOrEmpty(Model._maestroClaseEntities.nombreMaestroClase))
                                {
                                    <p>Sin Información</p>
                                }
                                else
                                {
                                    <p>@Model._maestroClaseEntities.nombreMaestroClase</p>
                                }
                            </div>
                        }
                    </div>
                    <div class="row"></div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            @Html.LabelFor(model => model._informacionProyectoEntities.fechaCalificacionDefinitivaInformacionProyecto)
                        </div>
                        <div class="control-display col-md-4">
                            @if (Model._informacionProyectoEntities.fechaCalificacionDefinitivaInformacionProyecto == null || Model._informacionProyectoEntities.fechaCalificacionDefinitivaInformacionProyecto.Year == 1900)
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Convert.ToDateTime(Model._informacionProyectoEntities.fechaCalificacionDefinitivaInformacionProyecto).ToShortDateString()</p>
                            }
                        </div>
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._MaestroEstadoBeneficioEntities.NombreMaestroEstadoBeneficio)
                        </div>
                        <div class="control-display col-md-3">
                            @if (String.IsNullOrEmpty(Model._maestroEstadoProyectoEntities.NombreMaestroEstadoProyecto))
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Model._maestroEstadoProyectoEntities.NombreMaestroEstadoProyecto</p>
                            }
                        </div>
                    </div>
                    <div class="row"></div>

                    @*Alternativa de postulacion solo sera visible para los programas del
                        y DS49 reconstruccion*@
                    @if (Model._caracteristicasEspecialesEntities.idMaestroPrograma == 4 || Model._caracteristicasEspecialesEntities.idMaestroPrograma == 5)
                    {
                        <div class="form-group">
                            <div class="control-label col-md-2">
                                @Html.LabelFor(model => model._maestroAlternativaPostulacionEntities.nombreMaestroAlternativaPostulacion)
                            </div>
                            <div class="control-display col-md-4 ">
                                @if (String.IsNullOrEmpty(Model._maestroAlternativaPostulacionEntities.nombreMaestroAlternativaPostulacion))
                                {
                                    <p>Sin Información</p>
                                }
                                else
                                {
                                    <p>@Model._maestroAlternativaPostulacionEntities.nombreMaestroAlternativaPostulacion</p>
                                }
                            </div>
                        </div>
                        <div class="row"></div>
                    }


                    <div class="form-group">
                        <div class="control-label col-md-2">
                            @if (Model._solicitudPago.idSolicitudPago > 0)
                            {
                                if (@Model._solicitudPago.resolucionContrato != null)
                                {
                                    if (@Model._solicitudPago.resolucionContrato > 0)
                                    {
                                        @Html.LabelFor(model => model._solicitudPago.resolucionContrato)
                                    }
                                }
                            }
                            else
                            {
                                @Html.LabelFor(model => model._solicitudPago.resolucionContrato)
                            }

                        </div>
                        <div class="control-display col-md-3">
                            @if (Model._solicitudPago.idSolicitudPago > 0)
                            {
                                if (@Model._solicitudPago.resolucionContrato != null)
                                {
                                    if (@Model._solicitudPago.resolucionContrato > 0)
                                    {
                                        <p>@Model._solicitudPago.resolucionContrato</p>
                                    }
                                }

                                @*@Html.TextBoxFor(model => model._solicitudPago.resolucionContrato, new { @class = "form-control pull-left", @maxlength = "5", @disabled = "disabled", @placeholder = "Ingrese resolución de contrato", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })*@
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model._solicitudPago.resolucionContrato, new { @class = "form-control pull-left", @maxlength = "5", @placeholder = "Ingrese resolución de contrato", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model._solicitudPago.resolucionContrato)</span>
                            }
                        </div>
                        <div class="control-label col-md-1"></div>
                        <div class="control-label col-md-3">
                            @if (Model._solicitudPago.idSolicitudPago > 0)
                            {
                                if (@Model._solicitudPago.fechaResolucionContrato != null && @Model._solicitudPago.fechaResolucionContrato != string.Empty)
                                {
                                    if (Convert.ToDateTime(@Model._solicitudPago.fechaResolucionContrato).Year >= 2000)
                                    {
                                        @Html.LabelFor(model => model._solicitudPago.fechaResolucionContrato)
                                    }
                                }

                            }
                            else
                            {
                                @Html.LabelFor(model => model._solicitudPago.fechaResolucionContrato)
                            }

                        </div>
                        <div class="control-display col-md-3">
                            @if (Model._solicitudPago.idSolicitudPago > 0)
                            {
                                if (@Model._solicitudPago.fechaResolucionContrato != null && @Model._solicitudPago.fechaResolucionContrato != string.Empty)
                                {
                                    if (Convert.ToDateTime(@Model._solicitudPago.fechaResolucionContrato).Year >= 2000)
                                    {
                                        <p>@Model._solicitudPago.fechaResolucionContrato</p>
                                    }
                                }

                            }
                            else
                            {
                                @Html.TextBoxFor(model => model._solicitudPago.fechaResolucionContrato, new { @id = "fecResolucionContrato", @class = "form-control has-error  input-sm", @placeholder = "Ingrese fecha de resolución", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                @*<span class="help-block">@Html.ValidationMessageFor(model => model._solicitudPago.fechaCreacionSolicitud)</span>*@
                                @*<span id="msgFecha" class="text-danger" style="display:none"></span>*@
                            }
                        </div>
                    </div>

                    <div class="row"></div>
                    <div class="form-group">
                        @if (Model._caracteristicasEspecialesEntities.idMaestroPrograma == 8)
                        {

                            <div class="control-label col-md-2">
                                @Html.LabelFor(model => model._caracteristicasEspecialesEntities.nombreSubModalidad)
                            </div>
                            <div class="control-display col-md-4">

                                <p>@Model._caracteristicasEspecialesEntities.nombreSubModalidad</p>
                            </div>
                        }
                        else
                        {
                            <div class="control-label col-md-2">
                            </div>
                            <div class="control-display col-md-4 ">
                            </div>
                        }





                        <div class="control-label col-md-2">
                        </div>
                        <div class="control-display col-md-4 ">
                        </div>

                    </div>
                    <div class="row"></div>
                    <div class="form-group">
                        <div class="control-label col-md-2">
                            @Html.LabelFor(model => model._maestroResolucionEntities.nombreMaestroResolucion)
                        </div>
                        <div class="control-display col-md-4">
                            @if ((Model._informacionProyectoEntities.idMaestroPrograma != 1 && Model._informacionProyectoEntities.idMaestroPrograma != 2 && Model._informacionProyectoEntities.idMaestroPrograma != 3 && Model._informacionProyectoEntities.idMaestroPrograma != 5 && Model._informacionProyectoEntities.idMaestroPrograma != 7 && Model._informacionProyectoEntities.idMaestroPrograma != 8))
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Model._maestroResolucionEntities.nombreMaestroResolucion</p>
                            }
                        </div>

                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._maestroResolucionEntities.fechaMaestroResolucion)
                        </div>
                        <div class="control-display col-md-3">
                            @if ((Model._informacionProyectoEntities.idMaestroPrograma != 1 && Model._informacionProyectoEntities.idMaestroPrograma != 2 && Model._informacionProyectoEntities.idMaestroPrograma != 3 && Model._informacionProyectoEntities.idMaestroPrograma != 5 && Model._informacionProyectoEntities.idMaestroPrograma != 7 && Model._informacionProyectoEntities.idMaestroPrograma != 8))
                            {
                                <p>Sin Información</p>
                            }
                            else
                            {
                                <p>@Convert.ToDateTime(Model._maestroResolucionEntities.fechaMaestroResolucion).Year</p>
                            }
                        </div>

                    </div>


                </div>
                <div class="row"></div>

                @*variable oculta, solicitada por margarita Fecha AT  11-02-2019 12:57*@

                <br />
                <hr />
                <div class="form-group">
                    <div class="control-label col-md-2">
                        @Html.LabelFor(model => model._informacionProyectoEntities.numeroViviendasInformacionProyecto)
                    </div>
                    <div class="control-display col-md-4">
                        @if (Model._solicitudPago.idSolicitudPago > 0)
                        {
                            <p>@Model._solicitudPago.numeroViviendasSolicitudPago</p>
                        }
                        else
                        {
                            <p>@Model._informacionProyectoEntities.numeroViviendasInformacionProyecto</p>
                        }
                    </div>
                    <div class="control-label col-md-3">
                        <b style="color:red;">(*)</b> @Html.LabelFor(model => model._informacionProyectoEntities.cantidadBeneficiariosInformacionProyecto)
                    </div>
                    <div class="control-display col-md-3">
                        @if (Model._solicitudPago.idSolicitudPago > 0)
                        {
                            <p> @Model._solicitudPago.numeroFamiliasPagadarSolicitudPago</p>


                        }
                        else
                        {
                            @Html.TextBoxFor(model => model._informacionProyectoEntities.cantidadBeneficiariosInformacionProyecto, new { @class = "form-control", @maxlength = "3", @placeholder = "Ingrese cantidad de beneficiarios", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                            <span class="help-block">@Html.ValidationMessageFor(model => model._informacionProyectoEntities.cantidadBeneficiariosInformacionProyecto)</span>
                        }
                    </div>
                </div>
                <div class="row"></div>
                <div class="form-group">
                    <div class="control-label col-md-2">
                        @Html.LabelFor(model => model._solicitudPago.avanceObra)
                    </div>
                    <div class="control-display col-md-4">

                        @if (Model._informacionProyectoEntities.porcentajeAvanceObra == null)
                        {
                            <p>No Aplica</p>
                        }
                        else
                        {
                            <p>@Model._informacionProyectoEntities.porcentajeAvanceObra</p>
                        }
                    </div>
                    <div class="control-label col-md-3">
                        @Html.LabelFor(model => model._informacionProyectoEntities.estadoAvanceObra)
                    </div>
                    <div class="control-display col-md-3">
                        @if (String.IsNullOrEmpty(Model._informacionProyectoEntities.estadoAvanceObra))
                        {
                            <p>Sin Información</p>
                        }
                        else
                        {
                            <p>@Model._informacionProyectoEntities.estadoAvanceObra</p>
                        }
                    </div>
                </div>

                <div class="row"></div>
                <div class="form-group row">
                    <br />
                    @if (Model._solicitudPago.idSolicitudPago > 0)
                    {
                        <a class="col-md-6  pull-left control-label input-sm" data-toggle="modal" data-target="#PopUpServicios" onclick="setValor()">Identificación de servicios.</a>
                    }
                    else
                    {
                        <a class="col-md-6  pull-left control-label input-sm" data-toggle="modal" data-target="#PopUpServicios" onclick="setValor()">
                            &nbsp; <input type="checkbox" id="chkServicios" disabled="disabled" value="" required>&nbsp; Identificación de Servicios.
                        </a>
                    }
                </div>
            </div>

            <br />
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h2 class="panel-title">Destinatario</h2>
                </div>
                <!-- #region Destinatario -->
                <div class="panel-body">
                    <div class="form-group">
                        <div>
                            <div class="control-label col-md-3">
                                <b style="color:red;">(*)</b> @Html.LabelFor(model => model._maestroTipoProveedorEntities.nombreMaestroTipoProveedor)
                            </div>
                            <div class="col-md-4 pull-left">
                                @if (Model._solicitudPago.idSolicitudPago > 0)
                                {
                                    <select name="ddlTipoProveedor" onchange="mostrar(this.value);" class="form-control input-sm" id="ddlTipoProveedor" disabled="disabled">
                                        <option value="">-- Seleccione --</option>
                                        @for (int i = 0; i < Model._listMaestroTipoProveedorEntities.Count; i++)
                                        {
                                            if (Model._maestroTipoProveedorEntities.idMaestroTipoProveedor == Model._listMaestroTipoProveedorEntities[i].idMaestroTipoProveedor)
                                            {
                                                <option value="@Model._listMaestroTipoProveedorEntities[i].idMaestroTipoProveedor" selected="selected">@Model._listMaestroTipoProveedorEntities[i].nombreMaestroTipoProveedor </option>
                                            }
                                            else
                                            {
                                                <option value="@Model._listMaestroTipoProveedorEntities[i].idMaestroTipoProveedor">@Model._listMaestroTipoProveedorEntities[i].nombreMaestroTipoProveedor </option>
                                            }
                                        }
                                    </select>

                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model._maestroTipoProveedorEntities.idMaestroTipoProveedor, (IEnumerable<SelectListItem>)ViewBag.TipoProveedor, "Selecciona", new { @class = "form-control", @id = "ddlTipoProveedor", @name = "ddlTipoProveedor", @disabled = "true", @onchange = "mostrar(this.value);" })
                                    @*<span class="help-block">@Html.ValidationMessageFor(model => model._maestroTipoProveedorEntities.idMaestroTipoProveedor)</span>*@
                                    <span id="msgTipoProveedor" class="text-danger" style="display:none"></span>

                                }
                            </div>


                        </div>
                        <div>
                            @if (Model._solicitudPago.idSolicitudPago > 0)
                            {
                                if (Model._solicitudPago.idMandatoProveedor > 0)
                                {<input type="checkbox" id="chkMandato" value="2" checked="checked" disabled="disabled">}
                                else
                                {
                                    { <input type="checkbox" id="chkMandato" value="2" disabled="disabled">}
                                }
                                <label for="cbox2">Mandato/Tercero SERVIU</label>

                            }
                            else
                            {
                                <input type="checkbox" id="chkMandato" onclick="mostrarMandato()" value="3">

                                <label for="cbox2">Mandato/Tercero SERVIU</label>
                            }

                        </div>
                        <br />
                        <div>
                            <div class="form-group oculta" id="capa1">
                                <hr />
                                <h4 class="panel-title">Entidad patrocinante</h4>

                                <hr />

                                <div class="control-display col-md-12">

                                    <div class="control-label col-md-2">
                                        @Html.LabelFor(model => model._proveedorEP.rutProveedor)
                                    </div>
                                    @if (Model._proveedorEP != null)
                                    {
                                        if (Model._solicitudPago.idSolicitudPago > 0 || Model._proveedorEP.rutProveedor.ToString().Length > 0)
                                        {
                                            <div class="control-display col-md-4">
                                                <p>@Model._proveedorEP.rutProveedor-@Model._proveedorEP.dvDigitoprovedor</p>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="col-sm-2">
                                            @Html.TextBoxFor(model => model._proveedorEP.rutProveedor, new { @class = "form-control amt", placeholder = "Ingrese Rut sin puntos, guión ni Dv", maxlength = "8", onblur = "getDV(this.id);", id = "rutEP", name = "rutEP", onkeypress = "return numeros(event)", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                            <span class="help-block">@Html.ValidationMessageFor(model => model._proveedorEP.rutProveedor)</span>
                                        </div>
                                        <div class="col-sm-1">
                                            @Html.TextBoxFor(model => model._proveedorEP.dvDigitoprovedor, new { @class = "form-control", placeholder = "Dv", id = "dvEP", name = "dvEP", @readonly = "readonly", disabled = "disabled" })
                                            @Html.HiddenFor(model => model._proveedorEP.dvDigitoprovedor, new { id = "hiddenDVEP" })
                                        </div>
                                        <div class="col-sm-1">

                                            <button type="button" class="close" onclick="rescatarNombreProveedor('rutEP');" style="margin-right: 26px" data-toggle="tooltip" data-placement="top" title="Consultar nombre"><span class="glyphicon glyphicon-search"></span></button>
                                        </div>
                                    }
                                    <div class="control-label col-md-2">
                                        @Html.LabelFor(model => model._proveedorEP.nombreProveedor)
                                    </div>
                                    <div class="control-display col-md-4">
                                        @if (Model._proveedorEP != null)
                                        {
                                            if (Model._solicitudPago.idSolicitudPago > 0 || Model._proveedorEP.nombreProveedor.Length > 0)
                                            {
                                                <p>@Model._proveedorEP.nombreProveedor</p>
                                            }
                                        }
                                        else
                                        {
                                            @Html.TextBoxFor(model => model._proveedorEP.nombreProveedor, new { @class = "form-control", @id = "txtNombreProveedorEP", @name = "txtNombreProveedorEP", @maxlength = "100", @placeholder = "Ingrese nombre del proveedor" })
                                            <span class="help-block">@Html.ValidationMessageFor(model => model._proveedorEP.nombreProveedor)</span>
                                        }
                                    </div>
                                </div>
                                <div class="row"></div>


                            </div>
                        </div>
                        <div>
                            <div class="form-group oculta" id="capa2">
                                <hr />
                                <h2 class="panel-title">Entidad constructora</h2>
                                <hr />

                                @if (Model._solicitudPago.idSolicitudPago > 0 && Model._proveedorEC != null)
                                {

                                    <div class="control-label col-md-2">
                                        @Html.LabelFor(model => model._proveedorEC.rutProveedor)
                                    </div>
                                    <div class="control-display col-md-4">
                                        <p>@Model._proveedorEC.rutProveedor-@Model._proveedorEC.dvDigitoprovedor </p>
                                    </div>
                                    <div class="control-label col-md-2">
                                        @Html.LabelFor(model => model._proveedorEC.nombreProveedor)
                                    </div>
                                    <div class="control-display col-md-4">
                                        <p>@Model._proveedorEC.nombreProveedor </p>
                                    </div>

                                }
                                else if (Model._listProveedorEC.Count > 0 && (Model._solicitudPago.idSolicitudPago == 0 || Model._solicitudPago.idSolicitudPago == null))
                                {

                                    if (Model._listProveedorEC.Count == 1)
                                    {


                                        <div class="control-label col-md-2">
                                            @Html.LabelFor(model => model._proveedorEC.rutProveedor)
                                        </div>
                                        <div class="control-display col-md-4">
                                            <p>@Model._proveedorEC.rutProveedor-@Model._proveedorEC.dvDigitoprovedor </p>
                                        </div>
                                        <div class="control-label col-md-2">
                                            @Html.LabelFor(model => model._proveedorEC.nombreProveedor)
                                        </div>
                                        <div class="control-display col-md-4">
                                            <p>@Model._proveedorEC.nombreProveedor </p>
                                        </div>


                                    }
                                    else
                                    {


                                        <div class="control-label col-md-2">
                                            @Html.LabelFor(model => model._proveedorEC.rutProveedor)
                                        </div>
                                        <div class="control-display col-md-4">
                                            @Html.DropDownListFor(model => model._proveedorEC.idProveedor, new SelectList(Model._listProveedorEC, "idProveedor", "rutCompleto"), new { @class = "form-control input-sm", id = "ddlListProveedorConstructora", name = "ddlListProveedorConstructora" })

                                        </div>
                                        <div class="control-label col-md-2">
                                            <label id="lblTitNombreEC">Proveedor:</label> @*@Html.LabelFor(model => model._proveedorEC.nombreProveedor)*@
                                        </div>
                                        <div class="control-display col-md-4">
                                            <p id="lblNombreEC"> Sin información</p>
                                            @*<p>@Model._proveedorEC.nombreProveedor </p>*@
                                        </div>
                                    }


                                }
                                else if (Model._listProveedorEC.Count == 0 && (Model._solicitudPago.idSolicitudPago == 0 || Model._solicitudPago.idSolicitudPago == null))
                                {




                                    <div class="control-label col-md-2">
                                        @Html.LabelFor(model => model._proveedorEC.rutProveedor)
                                    </div>
                                    <div class="col-sm-2">
                                        @Html.TextBoxFor(model => model._proveedorEC.rutProveedor, new { @class = "form-control amt", placeholder = "Ingrese Rut sin puntos, guión ni Dv", maxlength = "8", id = "rutEC", name = "rutEC", onblur = "getDV(this.id);", onkeypress = "return numeros(event)", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                        <span class="help-block">@Html.ValidationMessageFor(model => model._proveedorEC.rutProveedor)</span>
                                    </div>

                                    <div class="col-sm-1">
                                        @Html.TextBoxFor(model => model._proveedorEC.dvDigitoprovedor, new { @class = "form-control", placeholder = "Dv", id = "dvEC", name = "dvEC", @readonly = "readonly", disabled = "disabled" })
                                        @Html.HiddenFor(model => model._proveedorEC.dvDigitoprovedor, new { id = "hiddenDVEC" })

                                    </div>
                                    <div class="col-sm-1">

                                        <button type="button" class="close" onclick="rescatarNombreProveedor('rutEC');" style="margin-right: 26px" data-toggle="tooltip" data-placement="top" title="Consultar nombre"><span class="glyphicon glyphicon-search"></span></button>
                                    </div>
                                    <div class="control-label col-md-2">
                                        @Html.LabelFor(model => model._proveedorEC.nombreProveedor)
                                    </div>
                                    <div class="col-sm-3">
                                        @Html.TextBoxFor(model => model._proveedorEC.nombreProveedor, new { @class = "form-control", @id = "txtNombreProveedorEC", @name = "txtNombreProveedorEC", @maxlength = "100", @placeholder = "Ingrese nombre del proveedor" })
                                        <span class="help-block">@Html.ValidationMessageFor(model => model._proveedorEC.nombreProveedor)</span>
                                    </div>
                                }

                            </div>
                        </div>
                        <div>

                            <div class="form-group oculta" id="capa4">
                                <hr />
                                <h2 class="panel-title">FTO</h2>
                                <hr />

                                @if (Model._solicitudPago.idSolicitudPago > 0 && Model._proveedorFTO != null)
                                {

                                    <div class="control-label col-md-2">
                                        @Html.LabelFor(model => model._proveedorFTO.rutProveedor)
                                    </div>
                                    <div class="control-display col-md-4">
                                        <p>@Model._proveedorFTO.rutProveedor-@Model._proveedorFTO.dvDigitoprovedor </p>
                                    </div>

                                    <div class="control-label col-md-2">
                                        @Html.LabelFor(model => model._proveedorFTO.nombreProveedor)
                                    </div>
                                    <div class="control-display col-md-4">
                                        <p>@Model._proveedorFTO.nombreProveedor </p>
                                    </div>

                                }
                                else if (Model._listProveedorFTO.Count > 0 && (Model._solicitudPago.idSolicitudPago == 0 || Model._solicitudPago.idSolicitudPago == null))
                                {


                                    if (Model._listProveedorFTO.Count == 1)
                                    {
                                        @Html.HiddenFor(Model => Model._proveedorFTO)


                                        <div class="control-label col-md-2">
                                            @Html.LabelFor(model => model._proveedorFTO.rutProveedor)
                                        </div>
                                        <div class="control-display col-md-4">
                                            <p>@Model._proveedorFTO.rutProveedor-@Model._proveedorFTO.dvDigitoprovedor </p>
                                        </div>
                                        <div class="control-label col-md-2">
                                            @Html.LabelFor(model => model._proveedorFTO.nombreProveedor)
                                        </div>
                                        <div class="control-display col-md-4">
                                            <p>@Model._proveedorFTO.nombreProveedor </p>
                                        </div>

                                    }
                                    else
                                    {

                                        <div class="control-label col-md-2">
                                            @Html.LabelFor(model => model._proveedorFTO.rutProveedor)
                                        </div>
                                        <div class="control-display col-md-4">
                                            @Html.DropDownListFor(model => model._proveedorFTO.idProveedor, new SelectList(Model._listProveedorFTO, "idProveedor", "rutCompleto"), "-- Seleccione --", new { @class = "form-control input-sm", id = "ddlListProveedorFTO", name = "ddlListProveedorFTO" })

                                        </div>
                                        <div class="control-label col-md-2">
                                            <label id="lblTitNombreFTO">Proveedor:</label> @*@Html.LabelFor(model => model._proveedorEC.nombreProveedor)*@
                                        </div>
                                        <div class="control-display col-md-4">
                                            <p id="lblNombreFTO">Sin información</p>
                                            @*<p>@Model._proveedorEC.nombreProveedor </p>*@
                                        </div>

                                    }
                                }
                                else if (Model._listProveedorFTO.Count == 0 && (Model._solicitudPago.idSolicitudPago == 0 || Model._solicitudPago.idSolicitudPago == null))
                                {

                                    <div class="control-label col-md-2">
                                        @Html.LabelFor(model => model._proveedorFTO.rutProveedor)
                                    </div>
                                    <div class="col-sm-3">
                                        @Html.TextBoxFor(model => model._proveedorFTO.rutProveedor, new { @class = "form-control amt", placeholder = "Ingrese Rut sin puntos, guión ni Dv", maxlength = "8", onblur = "getDV(this.id);", id = "rutFTO", name = "rutFTO", onkeypress = "return numeros(event)", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                        <span class="help-block">@Html.ValidationMessageFor(model => model._proveedorFTO.rutProveedor)</span>
                                    </div>
                                    <div class="col-sm-1">
                                        @Html.TextBoxFor(model => model._proveedorFTO.dvDigitoprovedor, new { @class = "form-control", placeholder = "Dv", id = "dvFTO", name = "dvFTO", @readonly = "readonly", disabled = "disabled" })
                                        @Html.HiddenFor(model => model._proveedorFTO.dvDigitoprovedor, new { id = "hiddenDVFTO" })
                                    </div>
                                    <div class="col-sm-1">

                                        <button type="button" class="close" onclick="rescatarNombreProveedor('rutFTO');" style="margin-right: 26px" data-toggle="tooltip" data-placement="top" title="Consultar nombre"><span class="glyphicon glyphicon-search"></span></button>
                                    </div>
                                    <div class="control-label col-md-2">
                                        @Html.LabelFor(model => model._proveedorFTO.nombreProveedor)
                                    </div>
                                    <div class="col-sm-3">
                                        @Html.TextBoxFor(model => model._proveedorFTO.nombreProveedor, new { @class = "form-control", @maxlength = "100", @id = "txtNombreProveedorFTO", @placeholder = "Ingrese nombre del proveedor" })
                                        <span class="help-block">@Html.ValidationMessageFor(model => model._proveedorFTO.nombreProveedor)</span>
                                    </div>
                                }

                            </div>
                        </div>

                        <div id="divConMandato" name="divConMandato" class="control-display col-md-12 oculta">
                            <hr />

                            <label for="cbox2">Mandato/Tercero SERVIU</label>
                            <hr />

                            <div class="control-label col-md-2">
                                <b style="color:red;">(*) </b>@Html.LabelFor(model => model._proveedorMandato.rutProveedor)
                            </div>
                            @if (Model._proveedorMandato != null)
                            {
                                if (Model._solicitudPago.idSolicitudPago > 0 || Model._proveedorMandato.rutProveedor.ToString().Length > 0)
                                {
                                    <div class="control-display col-md-4">
                                        <p>@Model._proveedorMandato.rutProveedor-@Model._proveedorMandato.dvDigitoprovedor</p>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="col-sm-2">
                                    @Html.TextBoxFor(model => model._proveedorMandato.rutProveedor, new { @class = "form-control amt", placeholder = "Ingrese Rut", maxlength = "8", onblur = "getDV(this.id);", id = "rutEPM", name = "rutEPM", onkeypress = "return numeros(event)", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                    <span id="msgRutMandato" class="text-danger" style="display:none"></span>

                                </div>
                                <div class="col-sm-1">
                                    @Html.TextBoxFor(model => model._proveedorMandato.dvDigitoprovedor, new { @class = "form-control", placeholder = "Dv", id = "dvEPM", name = "dvEPM", @readonly = "readonly", disabled = "disabled" })
                                    @Html.HiddenFor(model => model._proveedorMandato.dvDigitoprovedor, new { id = "hiddenDVEP" })
                                </div>
                                <div class="col-sm-1">

                                    <button type="button" id="btnConsultarNombre" class="close" onclick="rescatarNombreProveedor('rutEPM');" style="margin-right: 26px" data-toggle="tooltip" data-placement="top" title="Consultar nombre"><span class="glyphicon glyphicon-search"></span></button>
                                </div>
                            }
                            <div class="control-label col-md-2">
                                @Html.LabelFor(model => model._proveedorMandato.nombreProveedor)
                            </div>
                            <div class="control-display col-md-4">
                                @if (Model._proveedorMandato != null)
                                {
                                    if (Model._solicitudPago.idSolicitudPago > 0 || Model._proveedorMandato.nombreProveedor.Length > 0)
                                    {
                                        <p>@Model._proveedorMandato.nombreProveedor</p>
                                    }
                                }
                                else
                                {
                                    <p id="txtNombreProveedorEPM">Sin información</p>

                                    @*@Html.TextBoxFor(model => model._proveedorMandato.nombreProveedor, new { @class = "form-control", @id = "txtNombreProveedorEPM", @name = "txtNombreProveedorEPM", @maxlength = "100", @placeholder = "Ingrese nombre del proveedor" })
                                        <span class="help-block">@Html.ValidationMessageFor(model => model._proveedorMandato.nombreProveedor)</span>*@
                                }
                                <br />
                            </div>


                            <div class="row control-display col-md-12">
                                <br />
                                <div id="divErrorConMandato" class="alert alert-danger oculta">
                                    <p id="strongErrorConMandato"></p>
                                </div>
                            </div>
                        </div>

                        <div>
                        </div>
                    </div>
                </div>
                <div class="spinner" style="display:none">
                    <div class="center-div">
                        <div class="inner-div">
                            <div class="loader"></div>
                        </div>
                    </div>
                </div>
            </div>
        }
        if (Model._caracteristicasEspecialesEntities != null)
        {
            <div id="PopUpServicios" class="modal fade" role="dialog">
                <div class="modal-dialog" id="mdialTamanio">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            @*<button type="button" class="close" data-dismiss="modal">&times;</button>*@
                            <h4 class="modal-title">Ingreso montos servicios y asignación directa</h4>
                        </div>
                        <div class="modal-body">
                            <h3 class="panel-title">Ingreso de montos con valor en UF expresados en números enteros o decimal.</h3>
                            <br />
                            @for (int i = 0; i < Model._aux2PlantillaEntities?.Count; i++)
                            {
                                <span class="row"><strong>@Model._aux2PlantillaEntities[i].nombreMaestroServicio</strong></span>

                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].idServicioParcialidad)
                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].idTipoServicioParcialidadCaracteristica)
                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].idCaracteristicaEspeciales)
                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].nombreSubModalidad)
                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].nombreTipologia)
                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].nombreSubModalidad)
                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].nombreMaestroServicio)
                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].nombreParcialidad)
                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].porcentajeParcialidad)
                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].parcialidadSeleccionada)
                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].idServicio)
                                @Html.HiddenFor(Model => Model._aux2PlantillaEntities[i].idParcialidad)

                                <br />
                                <div class="form-group">
                                    <div class="row">
                                        <div class="control-label col-md-2">
                                            @Html.LabelFor(modelitem => Model._aux2PlantillaEntities[i].montoServicio)
                                        </div>

                                        @if (Model._aux2PlantillaEntities[i].montoServicio != null)
                                        {
                                            <div class="control-display col-md-4">
                                                @Html.TextBoxFor(modelitem => Model._aux2PlantillaEntities[i].montoServicio, new { @class = "form-control", @id = ("txtMontoServicio" + Model._aux2PlantillaEntities[i].idServicio), @disabled = "disabled", @placeholder = "Ingrese monto servicio", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", MaxLength=15 })
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="control-display col-md-4">
                                                @*@Html.TextBoxFor(modelitem => Model._aux2PlantillaEntities[i].montoServicio, new { @class = "form-control", @maxlength = "18", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", @id = ("txtMontoServicio" + Model._aux2PlantillaEntities[i].idServicio), onkeyup = "ReCalculaMontos(this);", onkeypress = "return NumerosRegEx(this,event);" })
                                                    <span class="help-block">@Html.ValidationMessageFor(model => model._aux2PlantillaEntities[i].montoServicio)</span>*@
                                                @Html.TextBox("txtServicio", null, new { @class = "form-control", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", @id = ("txtMontoServicio" + Model._aux2PlantillaEntities[i].idServicio), onfocusout = "ReCalculaMontos(this);", onkeypress = "return NumerosRegEx(this,event);", MaxLength = 15 })
                                                @Html.HiddenFor(modelitem => Model._aux2PlantillaEntities[i].montoServicio, new { id = ("hdnMontoServicio" + Model._aux2PlantillaEntities[i].idServicio) })
                                            </div>
                                        }

                                        @if (Model._aux2PlantillaEntities[i].nombreMaestroServicio.ToUpper() != "PAGO ARANCELES")
                                        {
                                            <div class="control-label col-md-2">
                                                @Html.LabelFor(modelitem => Model._aux2PlantillaEntities[i].montoAsignacionDirecta)
                                            </div>
                                            if (Model._solicitudPago.idSolicitudPago > 0)
                                            {
                                                <div class="control-display col-md-4">
                                                    @Html.TextBoxFor(modelitem => Model._aux2PlantillaEntities[i].montoAsignacionDirecta, new { @class = "form-control", @id = ("txtAsignacionDirecta" + Model._aux2PlantillaEntities[i].idServicio), @disabled = "disabled", @placeholder = "No aplica", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", MaxLength=15})
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="control-display col-md-4">
                                                    @Html.TextBoxFor(modelitem => Model._aux2PlantillaEntities[i].montoAsignacionDirecta, new { @class = "form-control", @id = ("txtAsignacionDirecta" + Model._aux2PlantillaEntities[i].idServicio), @placeholder = "Ingrese monto asignación directa", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", onfocusout = "ReCalculaMontos(this);", onkeypress = "return NumerosRegEx(this,event);", MaxLength = 15 })
                                                    <span class="help-block">@Html.ValidationMessageFor(model => model._aux2PlantillaEntities[i].montoAsignacionDirecta)</span>
                                                    @*@Html.TextBox("txtAsignacion", null, new { @class = "form-control", @maxlength = "18", @id = ("txtAsignacionDirecta" + Model._aux2PlantillaEntities[i].idServicio), @placeholder = "Ingrese monto asignación directa", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", onkeyup = "ReCalculaMontos(this);", onkeypress = "return NumerosRegEx(this,event);" })*@
                                                    @Html.HiddenFor(modelitem => Model._aux2PlantillaEntities[i].montoAsignacionDirecta, new { id = ("hdnAsignacionDirecta" + Model._aux2PlantillaEntities[i].idServicio) })
                                                </div>
                                            }
                                        }
                                        @*else
                                            {
                                                <div class="control-display col-md-4">
                                                    @Html.TextBoxFor(modelitem => Model._aux2PlantillaEntities[i].montoAsignacionDirecta, new { @class = "form-control oculta", @value = "0", @maxlength = "8", @id = ("txtAsignacionDirecta" + Model._aux2PlantillaEntities[i].idServicio) })
                                                </div>
                                            }*@
                                    </div>
                                </div>
                            }
                            <div class="row"> <br /><br /><br /></div>
                            <div class="form-group">
                                <div class="control-label col-md-2">
                                    <label>Monto total proyecto:</label>
                                </div>
                                <div class="control-display col-md-4">
                                    <input class="form-control" placeholder="Monto total proyecto" disabled="disabled" id="txtMontoTotalProyectoPopUp" maxlength="15">
                                    @Html.HiddenFor(modelitem => Model._solicitudPagoServicios.montoTotalProyecto, new { id = "hdnMontoTotalProyectoServicios" })
                                </div>
                                <div class="control-label col-md-2">
                                </div>
                                <div class="control-display col-md-4">
                                </div>
                            </div>
                            <div class="row"><br /></div>
                            <div class="row">
                                <br />
                                <div id="divErrorServicios" class="alert alert-danger oculta">
                                    <strong id="strongErrorServicios">Error</strong>
                                </div>
                            </div>
                            <div class="row">
                                <br />
                                <div id="divSuccessServicios" class="alert alert-success oculta">
                                    <strong id="strongSuccessServicios"></strong>
                                </div>
                                <div id="divErrorServicios" class="alert alert-danger oculta">
                                    <strong id="strongErrorServicios">Error</strong>
                                </div>
                            </div>
                            <div class="alert alert-warning" id="divServiciosCalculoMonto">
                                <strong>Estimado, una vez que los Montos estén correctos se habilitará el botón 'Guardar servicios'</strong>
                                <br />
                                <strong>
                                    <p id="lblServiciosCalculoMonto"></p>
                                </strong>
                            </div>

                            @if (Model._solicitudPago.idSolicitudPago > 0)
                            {
                                <div class="modal-footer">
                                    <br />
                                    <button type="button" class="btn btn-danger" data-dismiss="modal">Salir</button>
                                </div>
                            }
                            else
                            {
                                <div class="modal-footer">
                                    <br />
                                    <button type="button" id="btnSaveServicios" name="btnSaveServicios" class="btn btn-primary">Guardar servicios</button>
                                    <button type="button" class="btn btn-danger" data-dismiss="modal" id="btnSalirServicios">Salir</button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="spinner" style="display:none">
                    <div class="center-div">
                        <div class="inner-div">
                            <div class="loader"></div>
                        </div>
                    </div>
                </div>
            </div>
        }

        if (Model._caracteristicasEspecialesEntities != null)
        {
            //Cambios DO
            <div class="modal fade" id="infoParcialidades" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <h4 class="modal-title" id="myModalLabel"></h4>
                        </div>
                        <div class="modal-body">
                            Estimado usuario, favor ingresar montos en <span style="font-weight:bold;">Identificación de Servicio</span> para habilitar la sección de <span style="font-weight:bold;">Identificación de parcialidades</span>.
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" data-dismiss="modal">Aceptar</button>
                        </div>
                    </div>
                </div>
            </div>
            //Cambios DO

            <div id="PopUpIncrementos" class="modal fade" role="dialog">
                <div class="modal-dialog" id="mdialTamanio2">
                    <!-- Modal content-->
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Selección de incrementos</h4>
                        </div>
                        <div class="modal-body">
                            @if (Model._listMaestroIncrementoEntities?.Count > 0)
                            {
                                for (int j = 0; j < Model._listMaestroIncrementoEntities?.Count; j++)
                                {
                                    @Html.HiddenFor(Model => Model._listMaestroIncrementoEntities[j].idMaestroIncremento)
                                    <div class="form-group">
                                        @if (Model._solicitudPago.idSolicitudPago > 0)
                                        {
                                            <div class="control-label col-md-2">
                                                @Html.CheckBoxFor(modelitem => Model._listMaestroIncrementoEntities[j].seleccionadoMaestroIncremento, new
                                           {
                                               @checked = Model._listMaestroIncrementoEntities[j].seleccionadoMaestroIncremento,
                                               @disabled = "disabled"
                                           })
                                            </div>
                                            <div class="control-display col-md-10">
                                                <strong>@Model._listMaestroIncrementoEntities[j].nombreMaestroIncremento</strong>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="control-label col-md-2">
                                                @Html.CheckBoxFor(modelitem => Model._listMaestroIncrementoEntities[j].seleccionadoMaestroIncremento, new
                                           {
                                               @checked = Model._listMaestroIncrementoEntities[j].seleccionadoMaestroIncremento,
                                               @id = ("chkIncremento" + Model._listMaestroIncrementoEntities[j].idMaestroIncremento)
                                           })
                                            </div>
                                            <div class="control-display col-md-10">
                                                <strong>@Model._listMaestroIncrementoEntities[j].nombreMaestroIncremento</strong>
                                            </div>
                                        }
                                    </div>
                                    <br />
                                    <div class="row"></div>
                                }
                                <br />
                                <br />
                                <div class="row"><br /></div>
                                <div class="row">
                                    <br />
                                    <div id="divErrorIncrementos" class="alert alert-danger oculta">
                                        <strong id="strongErrorIncrementos">Error</strong>
                                    </div>
                                </div>
                                if (Model._solicitudPago.idSolicitudPago > 0)
                                {
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-danger" data-dismiss="modal">Salir</button>
                                    </div>
                                }
                                else
                                {
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-primary" id="btnGetIncremento">Guardar</button>

                                    </div>
                                }
                            }
                            else
                            {
                                <div class="control-display col-md-10">
                                    <strong>NO APLICA</strong>
                                </div>
                                <br />
                                <br />

                            }
                        </div>
                    </div>
                </div>
                <div class="spinner" style="display:none">
                    <div class="center-div">
                        <div class="inner-div">
                            <div class="loader"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal fade" id="miModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            <h4 class="modal-title" id="myModalLabel">Mensaje</h4>
                        </div>
                        <div class="modal-body">
                            <div id="divBusqueda" class="alert alert-success">
                                <strong id="strongModal"></strong>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary" data-dismiss="modal">Cerrar</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-info oculta" id="informacionServicios">
                <div class="panel-heading">
                    <h2 class="panel-title">Información de servicios</h2>
                </div>
                <div class="panel-body">
                    <h3 class="panel-title">Ingreso de montos en UF.</h3>
                    <br />
                    <div class="form-group">
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._solicitudPagoServicios.montoTotalProyecto)
                        </div>
                        <div class="control-display col-md-3">
                            <p id="txtMontoTotalProyecto">@Model._solicitudPago.montoTotalProyecto</p>
                            @Html.HiddenFor(model => model._solicitudPago.montoTotalProyecto, new { id = "hdnMontoTotalProyecto" })
                            @Html.HiddenFor(model => model._solicitudPago.montoSolicitud, new { id = "hdnMontoSolicitud" })
                            @Html.HiddenFor(modelitem => Model._solicitudPagoServicios.montoTotalProyecto, new { id = "hdnMontoTotalOriginal" })
                        </div>
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._solicitudPagoServicios.montoPagado)
                        </div>
                        <div class="control-display col-md-3">
                            <p id="txtMontoPagado">@Model._solicitudPago.montoPagado</p>
                            @Html.HiddenFor(model => model._solicitudPago.montoPagado)
                        </div>
                    </div>
                    <div class="row"></div>
                    <div class="form-group">
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._solicitudPagoServicios.montoComprometido)
                        </div>
                        <div class="control-display col-md-3">
                            <p id="txtMontoComprometido">@Model._solicitudPago.montoComprometido</p>
                            @Html.HiddenFor(model => model._solicitudPago.montoComprometido)
                        </div>
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._solicitudPagoServicios.SaldoPorPagar)
                        </div>
                        <div class="control-display col-md-3">
                            <p id="txtSaldoPorPagar">@Model._solicitudPago.SaldoPorPagar</p>
                            @Html.HiddenFor(model => model._solicitudPago.SaldoPorPagar, new { id = "hdnSaldoPorPagar" })
                        </div>
                    </div>

                </div>
            </div>
            <div class="panel panel-info oculta" id="informacionFiscalizacionTecnica">
                <div class="panel-heading">
                    <h2 class="panel-title">Información de fiscalización técnica</h2>
                </div>
                <div class="panel-body">
                    <h3 class="panel-title">Ingreso de montos en UF.</h3>
                    <br />
                    <div class="form-group">
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._solicitudPagoServicios.montoTotalProyecto)
                        </div>
                        <div class="control-display col-md-3">
                            <p id="txtMontoTotalProyectoFTO">@Model._solicitudPago.montoTotalProyecto</p>
                            @Html.HiddenFor(model => model._solicitudPago.montoTotalProyecto, new { id = "hdnMontoTotalProyecto" })
                            @Html.HiddenFor(model => model._solicitudPago.montoSolicitud, new { id = "hdnMontoSolicitud" })
                            @Html.HiddenFor(modelitem => Model._solicitudPagoServicios.montoTotalProyecto, new { id = "hdnMontoTotalOriginal" })
                        </div>
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._solicitudPagoServicios.montoPagado)
                        </div>
                        <div class="control-display col-md-3">
                            <p id="txtMontoPagadoFTO">@Model._solicitudPago.montoPagado</p>
                            @Html.HiddenFor(model => model._solicitudPago.montoPagado)
                        </div>
                    </div>
                    <div class="row"></div>
                    <div class="form-group">
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._solicitudPagoServicios.montoComprometido)
                        </div>
                        <div class="control-display col-md-3">
                            <p id="txtMontoComprometidoFTO">@Model._solicitudPago.montoComprometido</p>
                            @Html.HiddenFor(model => model._solicitudPago.montoComprometido)
                        </div>
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._solicitudPagoServicios.SaldoPorPagar)
                        </div>
                        <div class="control-display col-md-3">
                            <p id="txtSaldoPorPagarFTO">@Model._solicitudPago.SaldoPorPagar</p>
                            @Html.HiddenFor(model => model._solicitudPago.SaldoPorPagar, new { id = "hdnSaldoPorPagar" })
                        </div>
                    </div>
                </div>
                @*<div class="panel-body">
                        <h3 class="panel-title">Ingreso de montos en UF.</h3>
                        <br />
                        <div class="form-group">
                            <div class="control-label col-md-3">
                                @Html.LabelFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.montoTotalProyecto)
                            </div>
                            <div class="control-display col-md-3">
                                @Html.TextBoxFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.montoTotalProyecto, new { @class = "form-control", @maxlength = "8", @placeholder = "Monto total del proyecto", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.montoTotalProyecto)</span>
                            </div>
                            <div class="control-label col-md-3">
                                @Html.LabelFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.montoPagado)
                            </div>
                            <div class="control-display col-md-3">
                                @Html.TextBoxFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.montoPagado, new { @class = "form-control", @maxlength = "8", @disabled = "disabled", @placeholder = "Monto pagado", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.montoPagado)</span>
                            </div>
                        </div>
                        <div class="row"></div>
                        <div class="form-group">
                            <div class="control-label col-md-3">
                                @Html.LabelFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.montoComprometido)
                            </div>
                            <div class="control-display col-md-3">
                                @Html.TextBoxFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.montoComprometido, new { @class = "form-control", @maxlength = "8", @disabled = "disabled", @placeholder = "Monto comprometido", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.montoComprometido)</span>
                            </div>
                            <div class="control-label col-md-3">
                                @Html.LabelFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.SaldoPorPagar)
                            </div>
                            <div class="control-display col-md-3">
                                @Html.TextBoxFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.SaldoPorPagar, new { @class = "form-control", @maxlength = "8", @disabled = "disabled", @placeholder = "Monto por pagar", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                <span class="help-block">@Html.ValidationMessageFor(model => model._solicitudPagoFiscalizacionTecnicaDeObra.SaldoPorPagar)</span>
                            </div>
                        </div>
                        <div class="row"></div>
                    </div>*@
            </div>


            <div class="panel panel-info oculta" id="DivParcialidades">
                <div class="panel-heading">
                    <h2 class="panel-title">Parcialidades del servicio</h2>
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="control-label col-md-12">

                            <div class="modal-body">
                                <h3 class="panel-title">Ingreso de montos con valor en UF expresados en números enteros o decimal.</h3>
                                <br />
                                <div class="oculta" id="ParcialidadesOrdinarias">
                                    @for (int i = 0; i < Model._aux2PlantillaEntities?.Count; i++)
                                    {
                                        if (Model._aux2PlantillaEntities[i].idServicio != 5 && Model._aux2PlantillaEntities[i].idServicio != 6)
                                        {

                                            //Contador para asignar nombre a la parcialidad
                                            int contadorParcialidad = 0;
                                            <div class="form-group">
                                                <div class="row">
                                                    <div class="control-label col-md-12">
                                                        <strong>@Model._aux2PlantillaEntities[i].nombreMaestroServicio </strong>
                                                    </div>
                                                </div>

                                                @for (int j = 0; j < Model._auxPlantillaEntities?.Count; j++)
                                                {
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idServicioParcialidad)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idTipoServicioParcialidadCaracteristica)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idCaracteristicaEspeciales)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreTipologia)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreSubModalidad)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreMaestroServicio)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreParcialidad)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].parcialidadSeleccionada)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idServicio)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idParcialidad)


                                                    if (Model._aux2PlantillaEntities[i].idServicio == Model._auxPlantillaEntities[j].idServicio)
                                                    {
                                                        contadorParcialidad = contadorParcialidad + 1;
                                                        string rescatarID = "chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad;


                                                        if (Model._solicitudPago.idSolicitudPago > 0)
                                                        {
                                                            <div class="row">
                                                                <div class="control-label col-md-2">
                                                                    @Html.CheckBoxFor(modelitem => Model._auxPlantillaEntities[j].parcialidadSeleccionada, new { @checked = Model._auxPlantillaEntities[j].parcialidadSeleccionada, @id = ("chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled" })
                                                                    <label class="form-check-label" for="@rescatarID"> Parcialidad @contadorParcialidad:</label>
                                                                </div>
                                                                <div class="control-display col-md-4">
                                                                    @Html.TextBoxFor(modelitem => Model._auxPlantillaEntities[j].montoParcialidad, new { @class = "form-control", @id = ("txtServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled", @placeholder = "No aplica", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                                                </div>
                                                            </div>
                                                        }
                                                        else
                                                        {


                                                            <div class="row">
                                                                @if (Model._solicitudPago.idSolicitudPago > 0)
                                                                {

                                                                    <div class="control-label col-md-2">
                                                                        @Html.CheckBoxFor(modelitem => Model._auxPlantillaEntities[j].parcialidadSeleccionada, new { @checked = Model._auxPlantillaEntities[j].parcialidadSeleccionada, @id = ("chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled" })
                                                                        <label class="form-check-label" for="@rescatarID"> Parcialidad @contadorParcialidad:</label>


                                                                    </div>
                                                                    <div class="control-display col-md-4">
                                                                        @Html.TextBoxFor(modelitem => Model._auxPlantillaEntities[j].montoParcialidad, new { @class = "form-control", @id = ("txtServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled", @placeholder = "No aplica", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                                                    </div>
                                                                }
                                                                else
                                                                {
                                                                    <div class="control-label col-md-2">

                                                                        @Html.CheckBoxFor(modelitem => Model._auxPlantillaEntities[j].parcialidadSeleccionada, new { @checked = Model._auxPlantillaEntities[j].parcialidadSeleccionada, @id = ("chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), onclick = "Habilitatxt(this.id)" })@*Cambios DO , *@
                                                                        <label class="form-check-label" for="@rescatarID"> Parcialidad @contadorParcialidad:</label>
                                                                    </div>
                                                                    <div class="control-display col-md-4">
                                                                        @Html.TextBox("txtParcialidad", null, new { @class = "form-control", @id = ("txtServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled", @placeholder = "Ingrese monto parcialidad", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", onkeyup = "ReCalculaMontosParcialidades(this);", onfocusout = "return NumerosRegEx(this,event);" })
                                                                        @Html.HiddenFor(modelitem => Model._auxPlantillaEntities[j].montoParcialidad, new { id = ("hdnServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad) })
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                    }

                                                }
                                            </div>

                                        }
                                    }
                                </div>
                                <div class="oculta" id="ParcialidadesFTO">
                                    @for (int i = 0; i < Model._aux2PlantillaEntities?.Count; i++)
                                    {
                                        if (Model._aux2PlantillaEntities[i].idServicio == 5)
                                        {

                                            //Contador para asignar nombre a la parcialidad
                                            int contadorParcialidad = 0;
                                            <div class="form-group">
                                                <div class="row">
                                                    <div class="control-label col-md-12">
                                                        <strong>@Model._aux2PlantillaEntities[i].nombreMaestroServicio </strong>
                                                    </div>
                                                </div>

                                                @for (int j = 0; j < Model._auxPlantillaEntities?.Count; j++)
                                                {
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idServicioParcialidad)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idTipoServicioParcialidadCaracteristica)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idCaracteristicaEspeciales)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreTipologia)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreSubModalidad)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreMaestroServicio)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreParcialidad)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].parcialidadSeleccionada)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idServicio)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idParcialidad)


                                                    if (Model._aux2PlantillaEntities[i].idServicio == Model._auxPlantillaEntities[j].idServicio)
                                                    {
                                                        contadorParcialidad = contadorParcialidad + 1;
                                                        string rescatarID = "chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad;


                                                        if (Model._solicitudPago.idSolicitudPago > 0)
                                                        {
                                                            <div class="row">
                                                                <div class="control-label col-md-2">
                                                                    @Html.CheckBoxFor(modelitem => Model._auxPlantillaEntities[j].parcialidadSeleccionada, new { @checked = Model._auxPlantillaEntities[j].parcialidadSeleccionada, @id = ("chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled" })
                                                                    <label class="form-check-label" for="@rescatarID"> Parcialidad @contadorParcialidad:</label>
                                                                </div>
                                                                <div class="control-display col-md-4">
                                                                    @Html.TextBoxFor(modelitem => Model._auxPlantillaEntities[j].montoParcialidad, new { @class = "form-control", @id = ("txtServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled", @placeholder = "No aplica", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                                                </div>
                                                            </div>
                                                        }
                                                        else
                                                        {


                                                            <div class="row">
                                                                @if (Model._solicitudPago.idSolicitudPago > 0)
                                                                {

                                                                    <div class="control-label col-md-2">
                                                                        @Html.CheckBoxFor(modelitem => Model._auxPlantillaEntities[j].parcialidadSeleccionada, new { @checked = Model._auxPlantillaEntities[j].parcialidadSeleccionada, @id = ("chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled" })
                                                                        <label class="form-check-label" for="@rescatarID"> Parcialidad @contadorParcialidad:</label>


                                                                    </div>
                                                                    <div class="control-display col-md-4">
                                                                        @Html.TextBoxFor(modelitem => Model._auxPlantillaEntities[j].montoParcialidad, new { @class = "form-control", @id = ("txtServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled", @placeholder = "No aplica", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                                                    </div>
                                                                }
                                                                else
                                                                {
                                                                    <div class="control-label col-md-2">

                                                                        @Html.CheckBoxFor(modelitem => Model._auxPlantillaEntities[j].parcialidadSeleccionada, new { @checked = Model._auxPlantillaEntities[j].parcialidadSeleccionada, @id = ("chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), onclick = "Habilitatxt(this.id)" })@*Cambios DO*@
                                                                        <label class="form-check-label" for="@rescatarID"> Parcialidad @contadorParcialidad:</label>
                                                                    </div>
                                                                    <div class="control-display col-md-4">
                                                                        @Html.TextBox("txtParcialidad", null, new { @class = "form-control", @id = ("txtServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled", @placeholder = "Ingrese monto parcialidad", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", onkeyup = "ReCalculaMontosParcialidades(this);", onfocusout = "return NumerosRegEx(this,event);" })
                                                                        @Html.HiddenFor(modelitem => Model._auxPlantillaEntities[j].montoParcialidad, new { id = ("hdnServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad) })
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                    }

                                                }
                                            </div>

                                        }
                                    }
                                </div>
                                <div class="oculta" id="DivPagoArancel">
                                    @for (int i = 0; i < Model._aux2PlantillaEntities?.Count; i++)
                                    {
                                        if (Model._aux2PlantillaEntities[i].idServicio == 6)
                                        {

                                            //Contador para asignar nombre a la parcialidad
                                            int contadorParcialidad = 0;
                                            <div class="form-group">
                                                <div class="row">
                                                    <div class="control-label col-md-12">
                                                        <strong>@Model._aux2PlantillaEntities[i].nombreMaestroServicio </strong>
                                                    </div>
                                                </div>

                                                @for (int j = 0; j < Model._auxPlantillaEntities?.Count; j++)
                                                {
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idServicioParcialidad)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idTipoServicioParcialidadCaracteristica)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idCaracteristicaEspeciales)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreTipologia)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreSubModalidad)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreMaestroServicio)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].nombreParcialidad)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].parcialidadSeleccionada)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idServicio)
                                                    @Html.HiddenFor(Model => Model._auxPlantillaEntities[j].idParcialidad)


                                                    if (Model._aux2PlantillaEntities[i].idServicio == Model._auxPlantillaEntities[j].idServicio)
                                                    {
                                                        contadorParcialidad = contadorParcialidad + 1;
                                                        string rescatarID = "chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad;


                                                        if (Model._solicitudPago.idSolicitudPago > 0)
                                                        {
                                                            <div class="row">
                                                                <div class="control-label col-md-2">
                                                                    @Html.CheckBoxFor(modelitem => Model._auxPlantillaEntities[j].parcialidadSeleccionada, new { @checked = Model._auxPlantillaEntities[j].parcialidadSeleccionada, @id = ("chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled" })
                                                                    <label class="form-check-label" for="@rescatarID"> Parcialidad @contadorParcialidad:</label>
                                                                </div>
                                                                <div class="control-display col-md-4">
                                                                    @Html.TextBoxFor(modelitem => Model._auxPlantillaEntities[j].montoParcialidad, new { @class = "form-control", @id = ("txtServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled", @placeholder = "No aplica", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                                                </div>
                                                            </div>
                                                        }
                                                        else
                                                        {


                                                            <div class="row">
                                                                @if (Model._solicitudPago.idSolicitudPago > 0)
                                                                {

                                                                    <div class="control-label col-md-2">
                                                                        @Html.CheckBoxFor(modelitem => Model._auxPlantillaEntities[j].parcialidadSeleccionada, new { @checked = Model._auxPlantillaEntities[j].parcialidadSeleccionada, @id = ("chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), })
                                                                        <label class="form-check-label" for="@rescatarID"> Parcialidad @contadorParcialidad:</label>


                                                                    </div>
                                                                    <div class="control-display col-md-4">
                                                                        @Html.TextBoxFor(modelitem => Model._auxPlantillaEntities[j].montoParcialidad, new { @class = "form-control", @id = ("txtServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled", @placeholder = "No aplica", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                                                    </div>
                                                                }
                                                                else
                                                                {
                                                                    <div class="control-label col-md-2">

                                                                        @Html.CheckBoxFor(modelitem => Model._auxPlantillaEntities[j].parcialidadSeleccionada, new { @checked = Model._auxPlantillaEntities[j].parcialidadSeleccionada, @id = ("chkServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), onclick = "Habilitatxt(this.id)", @class = "cancel" })@*Cambios DO*@
                                                                        <label class="form-check-label" for="@rescatarID"> Parcialidad @contadorParcialidad:</label>
                                                                    </div>
                                                                    <div class="control-display col-md-4">
                                                                        @Html.TextBox("txtParcialidad", null, new { @class = "form-control", @id = ("txtServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad), @disabled = "disabled", @placeholder = "Ingrese monto parcialidad", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", onkeyup = "ReCalculaMontosParcialidades(this);", onfocusout = "return NumerosRegEx(this,event);" })
                                                                        @Html.HiddenFor(modelitem => Model._auxPlantillaEntities[j].montoParcialidad, new { id = ("hdnServicio" + Model._aux2PlantillaEntities[i].idServicio + "Parcialidad" + Model._auxPlantillaEntities[j].idParcialidad) })
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                    }

                                                }
                                            </div>

                                        }
                                    }
                                </div>

                                <div>

                                </div>
                            </div>

                        </div>
                    </div>

                    <div class="row">
                    </div>
                    <div class="row">
                        <div id="divSuccessParcialidades" class="alert alert-success oculta">
                            <strong id="strongSuccessParcialidades"></strong>
                        </div>
                    </div>
                    <div class="row">
                        <br />
                        <div id="divErrorParcialidades" class="alert alert-danger oculta">
                            @*<button class="close" type="button" data-dismiss="alert">x</button>*@
                            <strong id="strongErrorParcialidades">Error</strong>
                        </div>
                    </div>
                    <div class="alert alert-warning" id="divCalculoMontoSolicitud">

                        <strong>Estimado, favor verificar montos en parcialidades.</strong>
                        <br />
                        <strong>
                            <p id="lblCalculoMontoSolicitud"></p>
                        </strong>
                    </div>
                    <br />
                    <br />

                    @if (Model._solicitudPago.idSolicitudPago > 0)
                    {
                        <div class="modal-footer">

                        </div>
                    }
                    else
                    {
                        <div class="modal-footer">
                            @*<input type="checkbox" id="chkParcialidad" disabled="disabled" style="display:none;" value="">*@

                            @*<button type="button" class="btn btn-primary" id="btnGet">Guardar parcialidades</button>*@
                        </div>
                    }
                </div>



            </div>




            <div class="panel panel-info">
                <div class="panel-heading">
                    <h2 class="panel-title">Solicitud de pago</h2>
                </div>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="control-label col-md-6">
                            <a class="col-md-12  pull-left control-label input-sm" data-toggle="modal" id="obtenerIncrementosGuardado" data-target="#PopUpIncrementos">Identificación de incrementos.</a>
                        </div>
                        <div class="control-label col-md-6">

                        </div>
                        <br />
                    </div>
                    <div class="row">
                    </div>
                    <div class="form-group">
                        <div class="control-label col-md-3">
                            <b style="color:red;">(*)</b> @Html.LabelFor(model => model._solicitudPago.fechaCreacionSolicitud)
                        </div>
                        <div class="control-display col-md-3">
                            @if (Model._solicitudPago.idSolicitudPago > 0)
                            {
                                <p>@Model._solicitudPago.fechaCreacionSolicitud</p>
                            }
                            else
                            {
                                @Html.TextBoxFor(model => model._solicitudPago.fechaCreacionSolicitud, new { @id = "fecRecepcion", @class = "form-control has-error  input-sm", @placeholder = "Ingrese fecha de creación", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                @*<span class="help-block">@Html.ValidationMessageFor(model => model._solicitudPago.fechaCreacionSolicitud)</span>*@
                                <span id="msgFecha" class="text-danger" style="display:none"></span>
                            }
                        </div>
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._solicitudPago.idSolicitudPago)
                        </div>
                        <div class="control-display col-md-3">
                            <p>@Model._solicitudPago.idSolicitudPago</p>
                        </div>
                    </div>
                    <div class="row"></div>
                    <div class="form-group">
                        <div class="control-label col-md-3">
                            <b style="color:red;">(*)</b>    @Html.LabelFor(model => model._maestroTipoPagoEntities.nombreMaestroTipoPago)
                        </div>
                        <div class="control-display col-md-3">
                            @if (Model._solicitudPago.idSolicitudPago > 0)
                            {
                                for (int i = 0; i < Model._listMaestroTipoPagoEntities.Count; i++)
                                {
                                    if (Model._solicitudPago.idTipoPago == Model._listMaestroTipoPagoEntities[i].idMaestroTipoPago)
                                    {
                                        <p>@Model._listMaestroTipoPagoEntities[i].nombreMaestroTipoPago</p>
                                    }
                                }
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model._maestroTipoPagoEntities.idMaestroTipoPago, (IEnumerable<SelectListItem>)ViewBag.TipoPago, "Selecciona", new { @class = "form-control", @id = "ddlTipoPago", @name = "ddlTipoPago" })
                                @*<span class="help-block">@Html.ValidationMessageFor(model => model._maestroTipoPagoEntities.idMaestroTipoPago)</span>*@
                                <span id="msgTipoPago" class="text-danger" style="display:none"></span>
                            }
                        </div>
                        <div class="control-label col-md-3">
                            @Html.LabelFor(model => model._solicitudPago.montoSolicitud)
                        </div>
                        <div class="control-display col-md-3 ">
                            <p id="txtMontoSolicitud">@Model._solicitudPago.montoSolicitud</p>
                        </div>
                    </div>
                    <div class="row"></div>
                    <div class="form-group">
                        @if (Model._solicitudPago.idSolicitudPago == 0)
                        {
                            <div class="control-label col-md-3">
                                @Html.LabelFor(model => model._solicitudPago.folioBoletaGarantiaSolicitudPago)
                            </div>
                            <div class="control-display col-md-2">

                                @Html.TextBoxFor(model => model._solicitudPago.folioBoletaGarantiaSolicitudPago, new { @id = "txtFolioBoleta", @class = "form-control", @maxlength = "7", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false" })
                                @*<span class="help-block">@Html.ValidationMessageFor(model => model._solicitudPago.folioBoletaGarantiaSolicitudPago)</span>*@
                                <span id="msgBoleta" class="text-danger" style="display:none"></span>

                            </div>
                            <div class="control-display col-md-1">
                                @if (Model._solicitudPago.idSolicitudPago == 0)
                                {
                                    <button title="Bucar Boleta" class="close" id="btnBuscarBoleta" style="margin-right: 25px;" type="button">
                                        <span class="glyphicon glyphicon-search"></span>
                                    </button>
                                }
                            </div>
                        }
                        else if (Model._solicitudPago.folioBoletaGarantiaSolicitudPago != string.Empty)
                        {
                            <div class="control-label col-md-3">
                                @Html.LabelFor(model => model._solicitudPago.folioBoletaGarantiaSolicitudPago)
                            </div>
                            <div class="control-display col-md-3">
                                <p> @Model._solicitudPago.folioBoletaGarantiaSolicitudPago </p>

                            </div>
                        }

                        @if (Model._solicitudPago.idSolicitudPago == 0)
                        {
                            <div class="control-label col-md-3">

                                @Html.LabelFor(model => model._solicitudPago.fechaBoletaGarantiaSolicitudPago)
                            </div>

                            <div class="control-display col-md-3">
                                <p id="txtFechaBoleta"></p>
                            </div>
                        }
                        else if (Model._solicitudPago.fechaBoletaGarantiaSolicitudPago != string.Empty)
                        {


                            <div class="control-label col-md-3">

                                @Html.LabelFor(model => model._solicitudPago.fechaBoletaGarantiaSolicitudPago)
                            </div>

                            <div class="control-display col-md-3">
                                <p> @Model._solicitudPago.fechaBoletaGarantiaSolicitudPago </p>
                            </div>

                        }
                    </div>
                </div>
            </div>
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h2 class="panel-title">Observaciones solicitud de pago</h2>
                </div>
                <!-- #region Destinatario -->
                <div class="panel-body">
                    <div class="form-group">
                        <div class="col-md-8">
                            @if (Model._solicitudPago.idSolicitudPago > 0)
                            {
                                @Html.TextAreaFor(model => model._solicitudPago.Observaciones, new { @class = "form-control", placeholder = "Ingrese observaciones", id = "observaciones", disabled = "disabled", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", maxlength = "200", @onkeydown = "ActualizarCantidad(this, contadorCaracteresDescripcionProducto, 200);", @onkeyup = "ActualizarCantidad(this, contadorCaracteresDescripcionProducto, 200);" })
                            }
                            else
                            {
                                @Html.TextAreaFor(model => model._solicitudPago.Observaciones, new { @class = "form-control", placeholder = "Ingrese observaciones", id = "observaciones", onpaste = "return false;", onCopy = "return false", onCut = "return false", onDrag = "return false", onDrop = "return false", maxlength = "200", @onkeydown = "ActualizarCantidad(this, contadorCaracteresDescripcionProducto, 200);", @onkeyup = "ActualizarCantidad(this, contadorCaracteresDescripcionProducto, 200);" })
                                <div class="align-left help-block" id="contadorCaracteresDescripcionProducto">200 caracteres restantes</div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            //MMR CDC-->if (Model._listDocument != null)
            //MMR CDC-->{
            //MMR CDC-->    if (Model._listDocument.Count > 0)
            //MMR CDC-->    {
            //MMR CDC-->       <div class="panel panel-info">
            //MMR CDC-->            <div class="panel-heading">
            //MMR CDC-->                <h2 class="panel-title">Documentos</h2>
            //MMR CDC-->            </div>
            //MMR CDC-->            <!-- #region Destinatario -->
            //MMR CDC-->            <div class="panel-body">
            //MMR CDC-->                <div class="form-group">
            //MMR CDC-->                    <div class="col-md-12">
            //MMR CDC-->                        <table class="table table-striped">
            //MMR CDC-->                            <thead>
            //MMR CDC-->                                <tr>
            //MMR CDC-->                                    <th scope="col">N°</th>
            //MMR CDC-->                                    <th scope="col">Nombre Documento</th>
            //MMR CDC-->                                    <th scope="col">Publicado</th>
            //MMR CDC-->                                    <th scope="col">Tipo Documento</th>
            //MMR CDC-->                                    <th scope="col">Ruta</th>
            //MMR CDC-->                                </tr>
            //MMR CDC-->                            </thead>
            //MMR CDC-->                            <tbody>
            //MMR CDC-->                                @{int contador = 0;}
            //MMR CDC-->
            //MMR CDC-->                                @foreach (var item in Model._listDocument)
            //MMR CDC-->                                {
            //MMR CDC-->                                    contador = contador + 1;
            //MMR CDC-->                                    <tr>
            //MMR CDC-->                                        <th scope="row">@contador</th>
            //MMR CDC-->                                        <td>@item.Nombre_Documento</td>
            //MMR CDC-->                                        <td>@item.Publicado</td>
            //MMR CDC-->                                        <td>@item.Tipo_Documento</td>
            //MMR CDC-->                                        <td>
            //MMR CDC-->                                            <a target="_blank" href="@item.Ruta">visualizar</a>
            //MMR CDC-->
            //MMR CDC-->                                        </td>
            //MMR CDC-->
            //MMR CDC-->                                    </tr>
            //MMR CDC-->                                }
            //MMR CDC-->                            </tbody>
            //MMR CDC-->                        </table>
            //MMR CDC-->
            //MMR CDC-->
            //MMR CDC-->                    </div>
            //MMR CDC-->                </div>
            //MMR CDC-->            </div>
            //MMR CDC-->        </div>
            //MMR CDC-->    }
            //MMR CDC-->}
            <div class="alert alert-warning" id="divbtnGrabar">
                <strong>Estimado, una vez ingresado los montos en 'Identificación de servicios' e 'Identificación de parcialidades' se habilitará el botón 'Grabar solicitud de pago'.</strong>
            </div>
            <div class="alert alert-warning" id="divMontosCero">
            </div>
                                                }

        <div id="divError" class="alert alert-danger oculta">
            <strong id="strongError">Error</strong>
        </div>

        <div id="divErrorFaltaObligatorio" class="alert alert-danger oculta">
            <strong id="strongErrorObligatorio">Error</strong>
        </div>

        <div class="form-group row">
            <div class="row">
                <div class="pull-right">
                    <button class="btn btn-primary btn-sm" id="btnVolver" type="button">
                        <span class="glyphicon glyphicon-backward" aria-hidden="true"></span>
                        Volver
                    </button>

                    @if (Model._caracteristicasEspecialesEntities != null)
                    {
                        if (Model._solicitudPago.idSolicitudPago > 0)
                        {
                            @*<br />*@
                            @*<button class="btn btn-primary btn-sm" disabled="disabled" id="btnGuardar" type="submit" onclick="verificarCheck()">
                                <span class="glyphicon glyphicon-save" aria-hidden="true"></span>
                                Grabar solicitud de pago
                                </button>*@
                        }
                        else
                        {
                            @*<br />*@
                            @:&nbsp;
                            <button class="btn btn-primary btn-sm" disabled id="btnGuardar" type="button">
                                <span class="glyphicon glyphicon-save" aria-hidden="true"></span>
                                Grabar solicitud de pago
                            </button>

                            <button class="btn btn-primary btn-sm oculta" id="btnGuardarSolicitud" type="submit">
                                <span class="glyphicon glyphicon-save" aria-hidden="true"></span>
                                Grabar solicitud de pago
                            </button>
                        }
                    }
                    &nbsp
                    @Html.ActionLink("Limpiar", "GeneracionSolicitudPago", "SolicitudPago", new { @class = "btn btn-default btn-sm" })
                </div>
            </div>
        </div>
    }
</div>

<div class="spinner" style="display:none">
    <div class="center-div">
        <div class="inner-div">
            <div class="loader"></div>
        </div>
    </div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" aria-labelledby="mySmallModalLabel" aria-hidden="true" id="modalOk">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h4 class="modal-title" id="lblTituloModalOk">Mensaje</h4>
            </div>
            <div class="modal-body">
                <div id="divResultModalOk" class="alert alert-success oculta">
                    <button class="close" type="button" data-dismiss="alert"></button>
                    <strong id="strongModalOk">@ViewBag.guardado</strong>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal" id="modal-btn-si">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(function () {
        $.fn.datepicker.dates['es'] = {
            endDate: "today",
            days: ["Domingo", "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado"],
            daysShort: ["Dom", "Lun", "Mar", "Mie", "Jue", "Vie", "Sab"],
            daysMin: ["Do", "Lu", "Ma", "Mi", "Ju", "Vi", "Sa"],
            months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
            monthsShort: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
            today: "Hoy",
            clear: "Limpiar",
            format: "dd-mm-yyyy",
            titleFormat: "MM yyyy", /* Leverages same syntax as 'format' */
            weekStart: 0
        };

        $('#fecRecepcion').datepicker({
            language: "es",
            endDate: new Date(),
            startDate: new Date("2017-01-01")
        });
        $('#fecResolucionContrato').datepicker({
            language: "es",
            endDate: new Date(),
            startDate: new Date("2017-01-01")
        });
    });

    //Cambios DO
    function getDV(id) {
        var numero;
        var rutDV;


        if (id == "rutEP") {
            numero = document.getElementById("rutEP");
            rutDV = document.getElementById("dvEP");



        }
        if (id == "rutEPM") {
            numero = document.getElementById("rutEPM");
            rutDV = document.getElementById("dvEPM");



        }
        else if (id == "rutEC") {
            numero = document.getElementById("rutEC");
            rutDV = document.getElementById("dvEC");
            if (numero == "null") {

            }



        } else if (id == "rutFTO") {
            numero = document.getElementById("rutFTO");
            rutDV = document.getElementById("dvFTO");

        }



        nuevo_numero = numero.value.toString().split('.').join('').split("").reverse().join("");
        nuevo_numeroRut = numero.value.toString().split('.').join('').split("").join("");
        for (i = 0, j = 2, suma = 0; i < nuevo_numero.length; i++ , ((j == 7) ? j = 2 : j++)) {
            suma += (parseInt(nuevo_numero.charAt(i)) * j);
        }
        n_dv = 11 - (suma % 11);
        var dv = ((n_dv == 11) ? 0 : ((n_dv == 10) ? "K" : n_dv));

        rutDV.value = dv;







        if (id == "rutEP") {
            document.getElementById("hiddenDVEP").value = dv;
            if (numero.value == "") {
                $('#dvEP').val('');
            }
        }
        else if (id == "rutEC") {
            document.getElementById("hiddenDVEC").value = dv;
            if (numero.value == "") {
                $('#dvEC').val('');
            }
        }
        else if (id == "rutFTO") {
            document.getElementById("hiddenDVFTO").value = dv;
            if (numero.value == "") {
                $('#dvFTO').val('');
            }
        }
    }
    function rescatarNombreProveedor(entidad) {

        $('.spinner').css('display', 'block');

        var numero;
        var rutDV;


        if (entidad == "rutEP") {
            numero = document.getElementById("rutEP").value;
            rutDV = document.getElementById("dvEP").value;



        }
        if (entidad == "rutEPM") {
            numero = document.getElementById("rutEPM").value;
            rutDV = document.getElementById("dvEPM").value;



        }
        else if (entidad == "rutEC") {
            numero = document.getElementById("rutEC").value;
            rutDV = document.getElementById("dvEC").value;

        } else if (entidad == "rutFTO") {
            numero = document.getElementById("rutFTO").value;
            rutDV = document.getElementById("dvFTO").value;

        }

            $.ajax({
                type: 'POST',
                url: '@Url.Action("ConsultaNombreProveedor")', //Llamada al metodo Json

                dataType: 'json',

                data: { Rut: numero, RutDv: rutDV, TipoProveedor: entidad },
                                success: function (r) {

                                    if (entidad == "rutEP") {
                                        document.getElementById("txtNombreProveedorEP").value = r;

                                        if (r != "Sin información") {
                                            document.getElementById("txtNombreProveedorEP").disabled = true;
                                        } else {
                                            document.getElementById("txtNombreProveedorEP").disabled = false;
                                        }

                                    }
                                    else if (entidad == "rutEPM") {

                                        if (r == "Sin información") {
                                            document.getElementById('txtNombreProveedorEPM').innerHTML = r;

                                            $('#divErrorConMandato').show();
                                            document.getElementById('strongErrorConMandato').innerHTML = 'Favor verificar rut e intentelo nuevamente.';

                                        } else {
                                            document.getElementById('txtNombreProveedorEPM').innerHTML = r;
                                            $('#divErrorConMandato').hide();
                                        }



                                    }
                                    else if (entidad == "rutEC") {
                                        document.getElementById("txtNombreProveedorEC").value = r;

                                        if (r != "Sin información") {
                                            document.getElementById("txtNombreProveedorEC").disabled = true;
                                        } else {
                                            document.getElementById("txtNombreProveedorEC").disabled = false;
                                        }
                                    }
                                    else if (entidad == "rutFTO") {
                                        document.getElementById("txtNombreProveedorFTO").value = r;
                                        if (r != "Sin información") {
                                            document.getElementById("txtNombreProveedorFTO").disabled = true;
                                        } else {
                                            document.getElementById("txtNombreProveedorFTO").disabled = false;
                                        }
                                    }



                }
        });
        $('.spinner').css('display', 'none');
    }
    function numeros(e) {
        var tecla = e.keyCode;

        if (tecla == 8 || tecla == 9 || tecla == 13) {
            return true;
        }

        var patron = /[0-9]/;
        var tecla_final = String.fromCharCode(tecla);
        return patron.test(tecla_final);
    }

    function Habilitatxt(id) {
        var txtid = id.replace("chk", "txt");

        if (document.getElementById(id).checked) {
            document.getElementById(txtid).disabled = false;
        }
        else {
            document.getElementById(txtid).disabled = true;
            document.getElementById(txtid).value = '';
        }
    }
    //Cambios DO
</script>

@if (Model != null)
{
    <script>
        function ReCalculaMontos(valor) {
            var montoTotal = $("#hdnMontoTotalOriginal").val();//Monto Total del Proyecto BD
            if (montoTotal == "") {
                montoTotal = 0;
            }

            var listaServ = [];
            //Se obtienen todos los servicios existentes
            @for (int i = 0; i < Model._aux2PlantillaEntities?.Count; i++)
            {
                @:listaServ.push('@Model._aux2PlantillaEntities[i].idServicio');
                @*@:listaParcialidades.push({ idServicio: '@Model._aux2PlantillaEntities[i].idServicio' });*@
            }



            var MontoTotalSuma = 0;
            var valorMontoAsignacion = 0;

            var montoServicio;
            var montoAsignacion;

            for (i = 0; i < listaServ.length; i++) {
                montoServicio = $("#" + "txtMontoServicio" + listaServ[i]).val();//Campo Servicio
                if (montoServicio != "") {//Solo sumo campo no vacios
                    montoServicio = montoServicio.replace(/\,\b/gi, '')
                    montoServicio = montoServicio.replace(/\.\b/gi, '');
                    MontoTotalSuma = parseFloat(MontoTotalSuma) + parseFloat(montoServicio);
                }

                montoAsignacion = $("#" + "txtAsignacionDirecta" + listaServ[i]).val();//Campo AsignacionDirecta
                if (montoAsignacion != undefined && montoAsignacion != "") {//Solo sumo campos existentes no vacios
                    montoAsignacion = montoAsignacion.replace(/\,\b/gi, '')
                    montoAsignacion = montoAsignacion.replace(/\.\b/gi, '');
                    valorMontoAsignacion = valorMontoAsignacion + parseFloat(montoAsignacion);
                }
            }

            MontoTotalSuma = MontoTotalSuma + valorMontoAsignacion;

            if (parseFloat(MontoTotalSuma) < (parseFloat(montoTotal))) {//Si monto actual es menor al Total BD
                $('#divServiciosCalculoMonto').show();
                $('#btnSaveServicios').removeAttr('disabled');
                $('#btnSaveServicios').attr('disabled', true);
                $('#lblServiciosCalculoMonto').text('El \'Monto Total\' del Proyecto no puede ser menor al que ya esta registrado en Solicitudes creadas anteriores.');
            }
            else {
                $('#divServiciosCalculoMonto').hide();
                $('#btnSaveServicios').removeAttr('disabled');
                $('#lblServiciosCalculoMonto').text('');
            }

            formatNumber(valor, true);
        }

        function ReCalculaMontosParcialidades(valor) {
            var listaServ = [];

            //Se obtienen todas las parcialidades con dato ingresado
            @for (int i = 0; i < Model._auxPlantillaEntities?.Count; i++)
            {
                @:var idServicio = @Model._auxPlantillaEntities[i].idServicio;
			    @:var idParcialidad = @Model._auxPlantillaEntities[i].idParcialidad;
			    @:var idCampo = "Servicio" + idServicio + "Parcialidad" + idParcialidad;
			    @:var resultadoParcialidad = $('#chk' + idCampo).prop('checked');
			    @:var valorParcialidad = $('#txt' + idCampo).val();

			    @:if (resultadoParcialidad)
			    {
				    @:if (valorParcialidad != "")
				    {
					    @:listaServ.push({ idParcialidad: idParcialidad.toString(), valorParcialidad: valorParcialidad.toString(), resultadoParcialidad: resultadoParcialidad.toString(), idServicio: idServicio.toString(), });
				    }
                }
            }

            var MontoTotalSuma = 0;
            var prueba = 0;
            var monto222 = 0;
            //var SaldoPorPagar = $("#hdnSaldoPorPagar").val();//Monto Saldo por Pagar
            var str = $("#hdnSaldoPorPagar").val();

            var SaldoPorPagar = str.replace(".", "");



            for (i = 0; i < listaServ.length; i++) {

                MontoTotalSuma = (parseFloat(MontoTotalSuma) + parseFloat(listaServ[i].valorParcialidad.replace(/\.\b/gi, '')))

            }

            //$.ajax({
            //    type: 'POST',
            //    url: "/SolicitudPago/obtenerValorSaldoPorPagar",
            //    dataType: 'json',
            //    data: { _txtMontoPagado: $("#txtMontoPagado").text(), _txtMontoComprometido: $("#txtMontoComprometido").text() },
            //    success: function (response) {

            //        $("#txtSaldoPorPagar").text(response);
            //    }
            //});



            if ((parseFloat(SaldoPorPagar)) < (parseFloat(MontoTotalSuma))) {//Si el SaldoporPagar es menor al MontoSolicitud

                var monto1 = parseFloat(MontoTotalSuma).toFixed(3);
                monto1 = monto1.replace(".", ",");
                var monto2 = parseFloat(SaldoPorPagar).toFixed(3);
                monto2 = monto2.replace(".", ",");

                $('#divCalculoMontoSolicitud').show();
                $('#btnGuardar').removeAttr('disabled');//btnGet
                $('#btnGuardar').attr('disabled', true);//btnGet
                $('#lblCalculoMontoSolicitud').text('El \'Monto solicitud\'(' + monto1 + ') no puede ser mayor que el \'Saldo por pagar\'(' + monto2 + ').');
            }
            else {
                $('#divCalculoMontoSolicitud').hide();
                $('#btnGuardar').removeAttr('disabled');//btnGet
                $('#lblCalculoMontoSolicitud').text('');
            }

            formatNumber(valor, true);
        }

        function ActualizarCantidad(ingreso, salida, max) {
            var ln = $(ingreso).val().length;
            if (ln >= max) {
                $(salida).text('Límite de caracteres alcanzado');
            } else {
                var ch = max - ln;
                $(salida).text(ch + ' caracteres restantes');
            }
        }

        $('#observaciones').on('input', function (e) {
            if (!/^[ a-z0-9áéíóúüñ.-]*$/i.test(this.value)) {
                this.value = this.value.replace(/[^ a-z0-9áéíóúüñ.-]+/ig, "");
            }
        });

        function NumerosRegEx(control, e) {
            var tecla = e.keyCode;
            var numero = $("#" + control.id).val().replace(/\.\b/gi, '');
            var indice = numero.indexOf(',');
            var maxLength = numero.length;

            if ((indice == -1) && (maxLength == 12) && (String.fromCharCode(tecla) != ',')) {
                return false;
            } else {
                var numInt = numero.substring(0, indice);
                var numDec = numero.substring((indice + 1), maxLength);
            }

            if (tecla == 8 || tecla == 9 || tecla == 13) {
                return true;
            }

            //var numero = control.value;

            if ((numero == '0') && (String.fromCharCode(tecla) == '0')) {
                return false;
            }

            if ((numero == '') && (String.fromCharCode(tecla) == ',')) {
                return false;
            }

            if ((numero.indexOf(',') > 0) && (String.fromCharCode(tecla) == ',')) {
                return false;
            }

            if ((numero.length > 0) && (numero.substring(0, 1) == "0")) {
                if (numero.length == 1) {
                    if (String.fromCharCode(tecla) != ',') {
                        $("#" + control.id).val(numero.substring(1, numero.length));
                    }
                } else if (numero.indexOf(',') == -1) {
                    $("#" + control.id).val(numero.substring(1, numero.length));
                }
            }

            var parteDecimal = '';//parte decimal del Numero completo
            var indice = numero.indexOf(',');//indice desde donde se encuentra la coma del decimal

            if (indice > 0) {
                parteDecimal = numero.substring(indice, numero.length);

                if (parteDecimal.length >= 4) {
                    return false;
                }
            }

            var patron = /[0-9,]/;
            var tecla_final = String.fromCharCode(tecla);
            return patron.test(tecla_final);
        }

        function formatNumber(control, bloque) {
            var numero;

            if (bloque) {
                numero = control.value;
            } else {
                numero = control.innerHTML;
                control.maxLength = 18;
            }                     

            if (numero.length <= control.maxLength) {
                console.log(789);
                console.log(control.id);
                var parteDecimal = '';//parte decimal del Numero completo
                var indice = numero.indexOf(',');//indice desde donde se encuentra la coma del decimal
                var parteEntera = '';//parte entera del numero completo

                if (indice > 0) {
                    parteDecimal = numero.substring(indice, numero.length);
                    parteEntera = numero.substring(0, numero.indexOf(','))
                } else {
                    parteEntera = numero;
                }

                parteEntera = parteEntera;//.replace(/\.\b/gi, '');//Reseteo valor sin puntos
                

                if (numero.length > 3) {
                    var nuevovalor = '';//valor final formateado en orden correcto
                    var _pE = parteEntera.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1.');
                    
                    parteEntera = _pE;
                    //parteEntera = parteEntera.split('').join('');//.replace(/^[\.]/, '');
                    nuevovalor = parteEntera + parteDecimal;

                    if (bloque) {
                        document.getElementById(control.id).value = nuevovalor;
                    } else {
                        document.getElementById(control.id).innerHTML = nuevovalor;
                    }
                } else {
                    if (bloque) {
                        document.getElementById(control.id).value = parteEntera + parteDecimal;
                    } else {
                        document.getElementById(control.id).innerHTML = parteEntera + parteDecimal;
                    }
                }
                //^\d{0,10}(\d{1,8}(\.\d{3})*|(\d+))(\,\d{1,3})?$/;
                // /(\d)(?=(\d{3})+(?!\d))/g, '$1,'
                // original dos de abajo
                // /(?=\d*\.?)(\d{3})/g, '$1.'

                //.split('').reverse().
            }
        }

        $(document).ready(function () {
            if ($('#txtMontoTotalProyecto').text != '0') {
                if (!((document.getElementById("txtMontoTotalProyecto") == undefined) || (document.getElementById("txtMontoTotalProyecto") == null))) {
                    formatNumber(document.getElementById("txtMontoTotalProyecto"), false);
                    formatNumber(document.getElementById("txtMontoTotalProyectoFTO"), false);
                }
            }

            if ($('#txtMontoPagado').text != '0') {
                if (!((document.getElementById("txtMontoPagado") == undefined) || (document.getElementById("txtMontoPagado") == null))) {
                    formatNumber(document.getElementById("txtMontoPagado"), false);
                    formatNumber(document.getElementById("txtMontoPagadoFTO"), false); @* CambioQA *@
                }
            }

            if ($('#txtMontoComprometido').text != '0') {
                if (!((document.getElementById("txtMontoComprometido") == undefined) || (document.getElementById("txtMontoComprometido") == null))) {
                    formatNumber(document.getElementById("txtMontoComprometido"), false);
                    formatNumber(document.getElementById("txtMontoComprometidoFTO"), false); @* CambioQA *@
                }
            }

            if ($('#txtSaldoPorPagar').text != '0') {
                if (!((document.getElementById("txtSaldoPorPagar") == undefined) || (document.getElementById("txtSaldoPorPagar") == null))) {
                    formatNumber(document.getElementById("txtSaldoPorPagar"), false);
                    formatNumber(document.getElementById("txtSaldoPorPagarFTO"), false);
                }
            }

            if ($('#txtMontoSolicitud').text != '0') {
                if (!((document.getElementById("txtMontoSolicitud") == undefined) || (document.getElementById("txtMontoSolicitud") == null))) {
                    formatNumber(document.getElementById("txtMontoSolicitud"), false);
                }
            }

            FormatServicios();

            FormatParcialidades();
        });

        function FormatServicios() {
            var listaServ = [];

            @for (int i = 0; i < Model._aux2PlantillaEntities?.Count; i++)
            {
                @:listaServ.push('@Model._aux2PlantillaEntities[i].idServicio');
            }

            for (i = 0; i < listaServ.length; i++) {
                formatNumber(document.getElementById("txtMontoServicio" + listaServ[i]), true);
            }

            for (j = 0; j < listaServ.length; j++) {
                var montoAsignacion = $("#" + "txtAsignacionDirecta" + listaServ[j]).val();

                if (montoAsignacion != undefined) {
                    formatNumber(document.getElementById("txtAsignacionDirecta" + listaServ[j]), true);
                    //formatNumber(document.getElementById("txtMontoServicio" + listaServ[i]), true);
                }
            }
        }

        function FormatParcialidades() {
            var listaParcialidades = [];

            @for (int i = 0; i < Model._auxPlantillaEntities?.Count; i++)
            {
                @:var idServicio = @Model._auxPlantillaEntities[i].idServicio;
			    @:var idParcialidad = @Model._auxPlantillaEntities[i].idParcialidad;
			    @:var idCampo = "Servicio" + idServicio + "Parcialidad" + idParcialidad;

                @:formatNumber(document.getElementById("txt" + idCampo), true);
            }
        }

    </script>

    //Selecciona check de servicios si es que cuenta con alguna Solicitud previa
    if (Model._aux2PlantillaEntities != null && Model._aux2PlantillaEntities.Count > 0)
    {
        if (Model._aux2PlantillaEntities[0].montoServicio != null)
        {
            <script>
                var listaParcialidades = [];
                //Se obtienen todos los servicios existentes
                @for (int i = 0; i < Model._aux2PlantillaEntities?.Count; i++)
                {
                    @:listaParcialidades.push('@Model._aux2PlantillaEntities[i].idServicio');
                }

                var MontoTotalSuma = 0;
                var valorMontoAsignacion = 0;

                var montoServicio;
                var montoAsignacion;
                var saldoPorPagar;
                var montoTotalProyecto;


                $.ajax({
                    type: 'POST',
                    url: "/SolicitudPago/obtenerValorMontoTotalProyecto",
                    dataType: 'json',
                    //data: { idProveedor: $("#ddlListProveedorConstructora").val() },
                    success: function (response) {


                        $("#txtMontoTotalProyecto").text(response);
                        var str = $("#txtMontoTotalProyecto").text();
                        var value = str;//.replace(".", "");

                        document.getElementById('hdnMontoTotalProyecto').value = value;
                        $("#txtMontoTotalProyectoFTO").text(response);
                    }
                });
                $.ajax({
                    type: 'POST',
                    url: "/SolicitudPago/obtenerValorMontoComprometido",
                    dataType: 'json',
                    data: { _txtMontoComprometido: $("#txtMontoComprometido").text() },
                    success: function (response) {

                        $("#txtMontoComprometido").text(response);
                    }
                });
                $.ajax({
                    type: 'POST',
                    url: "/SolicitudPago/obtenerValorMontoPagado",
                    dataType: 'json',
                    data: { _txtMontoPagado: $("#txtMontoPagado").text() },
                    success: function (response) {

                        $("#txtMontoPagado").text(response);
                    }
                });

                $.ajax({
                    type: 'POST',
                    url: "/SolicitudPago/obtenerValorSaldoPorPagar",
                    dataType: 'json',
                    data: { _txtMontoPagado: $("#txtMontoPagado").text(), _txtMontoComprometido: $("#txtMontoComprometido").text()},
                    success: function (response) {

                        $("#txtSaldoPorPagar").text(response);
                        $("#txtSaldoPorPagarFTO").text(response);
                        var str;
                        str = response;

                        str = str.replace(".", "");

                        document.getElementById('hdnSaldoPorPagar').value = str;
                    }
                });




                $("#chkServicios").prop('checked', true);
                $('#PopUpServicios').modal('hide');
                $('#divErrorServicios').hide();
                $('#dataParcialidades').removeAttr("data-target");
                $('#dataParcialidades').attr("data-target", "#PopUpServicios2");





                ValidacionMontosMinimos();
                mostrarBotonGuardar();
            </script>
        }
    }
}

@if (Model._maestroTipoProveedorEntities != null)
{
    <script>
        $(document).ready(function () {
            if (@Model._maestroTipoProveedorEntities.idMaestroTipoProveedor == 0) {
                $('#capa1').hide();
                $('#capa1').hide();
                $('#capa1').hide();
                $('#informacionServicios').hide();
                $('#informacionFiscalizacionTecnica').hide();
                $('#DivParcialidades').hide();
                $('#ParcialidadesOrdinarias').hide();
                $('#ParcialidadesFTO').hide();
                $('#DivPagoArancel').hide();
            } else if (@Model._maestroTipoProveedorEntities.idMaestroTipoProveedor  == 1) {//EP Servicios
                $('#capa1').show();
                $('#informacionServicios').show();
                $('#informacionFiscalizacionTecnica').hide();
                $('#DivParcialidades').show();
                $('#ParcialidadesOrdinarias').show();
                $('#ParcialidadesFTO').hide();
                $('#DivPagoArancel').hide();




            } else if (@Model._maestroTipoProveedorEntities.idMaestroTipoProveedor == 2) {//EC
                $('#capa2').show();
                $('#capa1').hide();
                $('#informacionServicios').show();
                $('#informacionFiscalizacionTecnica').hide();
                $('#DivParcialidades').show();
                $('#ParcialidadesOrdinarias').show();
                $('#ParcialidadesFTO').hide();
                $('#DivPagoArancel').hide();

            } else if (@Model._maestroTipoProveedorEntities.idMaestroTipoProveedor == 7) {//EP Pago Arancel
                $('#capa1').show();
                $('#informacionServicios').hide();
                $('#informacionFiscalizacionTecnica').show();
                $('#DivParcialidades').show();
                $('#ParcialidadesOrdinarias').hide();
                $('#ParcialidadesFTO').hide();
                $('#DivPagoArancel').show();
            } else if (@Model._maestroTipoProveedorEntities.idMaestroTipoProveedor == 6) {//FTO
                $('#capa4').show();
                $('#informacionServicios').hide();
                $('#informacionFiscalizacionTecnica').show();
                $('#DivParcialidades').show();
                $('#ParcialidadesOrdinarias').hide();
                $('#ParcialidadesFTO').show();
                $('#DivPagoArancel').hide();
            }

            var chkMandato = $('#chkMandato').prop('checked');
            if (chkMandato) {
                document.getElementById('divConMandato').style.display = "block";
            }

            var chkServicios = $('#chkServicios').prop('checked');
            if (chkServicios) {
                $("#ddlTipoProveedor").removeAttr('disabled');
            }

            var monto = $("#hdnMontoTotalProyectoServicios").val();
            $("#txtMontoTotalProyectoPopUp").val(monto);
            
            formatNumber(document.getElementById("txtMontoTotalProyectoPopUp"), true);

        });
    </script>
}

@*Cambios DO*@
@if (Model._solicitudPago != null)
{
    if (Model._solicitudPago.idSolicitudPago != null)
    {
        if (Model._solicitudPago.idSolicitudPago > 0)
        {
            <script type="text/javascript">
                $('#divbtnGrabar').hide();
            </script>
        }
    }
}
@*Cambios DO*@

@if (!string.IsNullOrEmpty(ViewBag.Message))
{
    <script>
        $('#divBusqueda').show();
    </script>
}

@if (!string.IsNullOrEmpty(ViewBag.guardado))
{
    <script>
            $('#modalOk').modal('toggle');
        $('#divResultModalOk').show();
        @*@if (ViewBag.guardado != null && ViewBag.guardado != string.Empty) {
                String mensaje = ViewBag.guardado;

            }

          $('#strongModalOk').text('@mensaje');*@
    </script>
}
<script>

    $('#btnBuscar').click(function () {
        if ($("#codPr").val() == "") {
            $("#codPr").css('border-color', '#b94a48');
            document.getElementById('msgCodPro').style.display = 'block';
            $("#msgCodPro").html("El código del proyecto es obligatorio.");
            error = 1;
        }

        if ($("#ddlPrograma").val() == "") {
            $("#ddlPrograma").css('border-color', '#b94a48');
            document.getElementById('msgPrograma').style.display = 'block';
            $("#msgPrograma").html("El nombre del programa es obligatorio.");
            error = 1;
        }
    });

</script>

<script>
    $('#btnBuscar').click(function () {
        var tex = $('#codPr').value;
        var ddl = $('#ddlPrograma').val();


        if (tex != "" && ddl != "") {
            $('.spinner').css('display', 'block');
        }
    });
    $('#btnGuardarSolicitud').click(function () { //btnGet
        document.getElementById('DivParcialidades').style.display = "none";
        document.getElementById("txtNombreProveedorFTO").disabled = false;
        document.getElementById("txtNombreProveedorEC").disabled = false;
        document.getElementById("txtNombreProveedorEP").disabled = false;
    });


    function VerificarFormulario(proveedor) { //btnGet


        var error = 0;
        if ($("#ddlTipoProveedor").val() == "") {
            $("#ddlTipoProveedor").css('border-color', '#b94a48');
            document.getElementById('msgTipoProveedor').style.display = 'block';
            $("#msgTipoProveedor").html("El campo tipo proveedor es obligatorio.");
            error = 1;
        }

        if ($("#fecRecepcion").val() == "") {
            $("#fecRecepcion").css('border-color', '#b94a48');
            document.getElementById('msgFecha').style.display = 'block';
            $("#msgFecha").html("El campo fecha creación solicitud es obligatoria.");
            error = 1;
        }

        //if ($("#fecResolucionContrato").val() == "") {
        //    $("#fecResolucionContrato").css('border-color', '#b94a48');
        //    document.getElementById('msgFecha').style.display = 'block';
        //    $("#msgFecha").html("El campo fecha creación solicitud es obligatoria.");
        //}

        if ($("#ddlTipoPago").val() == "") {
            $("#ddlTipoPago").css('border-color', '#b94a48');
            document.getElementById('msgTipoPago').style.display = 'block';
            $("#msgTipoPago").html("El campo tipo de pago es obligatorio.");
            error = 1;
        }

        //if ($("#txtFolioBoleta").val() == "") {
        //    $("#txtFolioBoleta").css('border-color', '#b94a48');
        //    document.getElementById('msgBoleta').style.display = 'block';
        //    $("#msgBoleta").html("El campo Folio boleta garantía es obligatorio.");
        //}


        $("#ddlTipoProveedor").change(function () {
            if ($("#ddlTipoProveedor").val() != "") {
                $("#ddlTipoProveedor").css('border-color', '#66afe9');
                document.getElementById('msgTipoProveedor').style.display = 'none';
                error = 1;
            }
        });

        $("#fecRecepcion").change(function () {
            if ($("#fecRecepcion").val() != "") {
                $("#fecRecepcion").css('border-color', '#66afe9');
                document.getElementById('msgFecha').style.display = 'none';
                error = 1;
            }
        });

        //$("#fecResolucionContrato").change(function () {
        //    if ($("#fecResolucionContrato").val() != "") {
        //        $("#fecResolucionContrato").css('border-color', '#66afe9');
        //        document.getElementById('msgFecha').style.display = 'none';
        //    }
        //});

        $("#ddlTipoPago").change(function () {
            if ($("#ddlTipoPago").val() != "") {
                $("#ddlTipoPago").css('border-color', '#66afe9');
                document.getElementById('msgTipoPago').style.display = 'none';
                error = 1;
            }
        });


        $('#btnBuscar').click(function () {
            if ($("#codPr").val() == "") {
                $("#codPr").css('border-color', '#b94a48');
                document.getElementById('msgCodPro').style.display = 'block';
                $("#msgCodPro").html("El código del proyecto es obligatorio.");

                error = 1;
            }

            if ($("#ddlPrograma").val() == "") {
                $("#ddlPrograma").css('border-color', '#b94a48');
                document.getElementById('msgPrograma').style.display = 'block';
                $("#msgPrograma").html("El nombre del programa es obligatorio.");
                error = 1;
            }
        });

        $("#codPr").keypress(function () {
            if ($("#codPr").val() == "") {
                $("#codPr").css('border-color', '#66afe9');
                document.getElementById('msgCodPro').style.display = 'none';
                error = 1;
            }
        });

        $("#ddlPrograma").change(function () {
            $("#ddlPrograma").css('border-color', '#66afe9');
            document.getElementById('msgPrograma').style.display = 'none';
            error = 1;
        });


        $("#ddlListProveedorConstructora").val("");
        $("#ddlListProveedorFTO").val("");
        //$("#ddlListProveedorConstructora option[value=""]").attr("selected", true);

        $("#txtFolioBoleta").keypress(function () {
            if ($("#txtFolioBoleta").val() == "") {
                $("#txtFolioBoleta").css('border-color', '#66afe9');
                document.getElementById('msgBoleta').style.display = 'none';

            }
        });

        if ($("#txtFechaBoleta").val() == "") {
            $("#txtFolioBoleta").css('border-color', '#66afe9');
            document.getElementById('msgBoleta').style.display = 'none';
        }

        var chkMandato = $('#chkMandato').prop('checked');
        if (chkMandato) {
            $("#rutEPM").keypress(function () {
                if ($("#rutEPM").val() == "") {
                    $("#rutEPM").css('border-color', '#66afe9');
                    document.getElementById('msgRutMandato').style.display = 'none';

                }
            });

            if ($("#rutEPM").val() == "") {

                $("#rutEPM").css('border-color', '#b94a48');
                document.getElementById('msgRutMandato').style.display = 'block';
                $("#msgRutMandato").html("Ingrese rut mandato/Tercero SERVIU.");
                error = 1;
            } else {
                $("#rutEPM").css('border-color', '#66afe9');

                $("#msgRutMandato").html("");
            }
        }




        if (error == 1) {

            $('#divErrorFaltaObligatorio').show();

            $("#strongErrorObligatorio").text("Favor complete todos los campos obligatorios.")
        } else {
            $('#divErrorFaltaObligatorio').css('display', 'none');

            var chkParcialidad = $('#identificacionParcialidad').val();
            var chkServicios = $('#chkServicios').prop('checked');

            if (chkServicios && chkParcialidad == 1) {

                $('#divError').css('display', 'none');
                $("#strongError").text("")
                $("#btnGuardar").hide()
                $("#btnGuardarSolicitud").show()
                document.getElementById('DivParcialidades').style.display = "none";

                //segir modificando aca
                if (proveedor > 0) {
                    $("#ddlListProveedorConstructora").val(proveedor);
                }

                document.getElementById("btnGuardarSolicitud").click();

            } else {


                if (!chkServicios && chkParcialidad == 1)
                    $("#strongError").text("Para generar solicitud, verificar ingreso de montos en 'Identificación de servicios' e 'Identificación de parcialidades'.")
                else if (!chkServicios)
                    $("#strongError").text("Para generar solicitud, verificar ingreso de montos en  'Identificación de servicios'.")
                else if (chkParcialidad == 0) {
                    $("#strongError").text("Para generar solicitud, verificar montos en la seccion 'Parcialidades del servicio'.")
                }
            }

        }


    };

     function setValor()
    {
         formatNumber(document.getElementById("txtMontoTotalProyectoPopUp"), true);
    }


</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

